/**
 * Name: Simulatore dello Staffaggio Per Automazione Cancelli - SimDSPAC
 * Filename: SDSPAC.js
 * Date: Feb 2017
 * Copyright: Alessandro Proglio (http://proteco.net) (http://mygateautomation.com)
 * Version: 0.3
 * Licence: GPL
 **/
 
 /**
   @fileOverview Questo file comprende tutte le funzionalità di un simulatore grafico 
   dell'installazione di automazioni per cancelli. La logica del sistema permette (una
   volta inserite le dimensioni e le caratteristiche del cancello) di determinare quale
   sia il tipo di motorizzazione più adatta al sito in questione, suggerisce inoltre la
   posizione in cui saldare/imbullonare le staffe di fissaggio al fine di ottenere le 
   migliori prestazioni dal motore. Permette(rà) di quantificare e presentare graficamente
   il rendimento, la velocità e la ottimizzazione di una particolare condizione di
   staffaggio.
   @author <a href="mailto:ale.proglio@gmail.com">Alessandro Proglio</a>
   @version 0.3 alpha release - febbraio 2017
 */
 
 
/*jshint browser:true unused:true undef:true globalstrict:true curly:true eqeqeq:true 
  forin:true maxparams:4 maxdepth:2 maxcomplexity:6 */
//STRICT MODE ES5
"use strict";

var $MYGATE = $MYGATE || {};

void function (NS) {
/**
  @namespace Racchiude il simulatore e eventuali future implementazioni
*/
//NS = $MYGATE; //trick, solo per associare la documentazione del namespace alla variabile.

  /**#@+
  Costanti
  */
  NS.svgNS = "http://www.w3.org/2000/svg";
  NS.xlinkNS = "http://www.w3.org/1999/xlink";
  NS.simDiv = "sim";
  /**#@- */
  
  /**#@+
  Impostazioni
  */  
  NS.test = false;
  NS.destro = 1; // 1 motore sinistro, -1 motore destro TODO:trovare soluzione per specchiare il testo, e sistemare posizione tooltip
  NS.isometrica = 0;
  //NS.persist = 1;     //abilita cookies tecnici 
  NS.scala = 0.5; // rapporto di scala
  NS.SVGelW = 1200;
  NS.SVGelH = 900;
  NS.SVGelOffX = 300;
  NS.SVGelOffY = 200;  
  /**#@- */
  
  /**#@+
  <i>Condizioni iniziali da portare dentro gli oggetti quando possibile, per fare ordine.</i>
  */
  NS.actstep = 1; // setup/ottimizza
  NS.motAtt = 1; //motore attivo
  NS.motPrec = 0; //motore precedente
  NS.locoX = 0;
  NS.locoY = 0;
  NS.clienteX = 0;
  NS.clienteY = 0;
  NS.AngPist = 0;
  NS.debounceForo = 6;
  NS.angVoluto = 1.6; //91,7 gradi circa come angolo di partenza
  NS.marginiPilastro = 0; // 0 se pilastro in acciaio, 30 se pilastro in cemento, servono per evitare di rompere lo spigolo uando si fora.
  NS.permettiFuoriPilastro = false;
  NS.permettiTaglioStaffa = true;
  NS.tagliaMeno = true;  // usa quarto foro fino a limite limiteTagliaMeno
  NS.limiteTagliaMeno = 3; //(se 3 allora minimo A = 1/3 corsa o massimo A = 2/3 corsa)
  NS.permettiBraccioSopraAnta = false; // il ridutore sta sopra l'anta, la quale può aprirsi passando sotto il motore. Valido solo con il braccio articolato.
  NS.muro = false;
  //LUNGHEZZE
  NS.Lx = 1400; // lunghezza anta (serve per verificare che la staffa corta si riesca a montare)
  NS.Ly = 15; // E' metà dello spessore dell'anta. Si assume che il punto A cada a metà. Ly serve a calcolare con precisione il punto di fissaggio della staffa corta. 
  NS.minyA = 0; // minima distanza y di cerniera anta da spigolo pilastro.
  NS.ac = 0;
  NS.bc = 0; // varia solo al variare della geometria del pilastro
  NS.inters = 0; //punti sull'anta che definiscono l'angolo massimo di apertura dell'anta contro il pilastro.
  NS.pesoAnta = 300; //TODO inserimento peso.
  //NOTA: le variabili strettamente necessarie a definire una condizione di staffaggio per un dato motore in un setup di pilastro sono solo due:
  // la posizione del punto B e, se previsto, del punto C. tutto il resto si può
  //ANGOLI MASSIMI
  
  NS.angFermo = 0; //
  /**  @description angolo AC asseX, dipende dalla distanza di C da A */
  NS.angACasseX = 0;
  NS.angPist = 0; // angolo del pistone chiuso
  NS.angMaxPilastro = 0; // var interna: angolo massimo di apertura prima di toccare il pilastro con l'anta - calcolato
  NS.angMaxStaffa = 0; // var interna: angolo massimo di apertura prima di toccare la manina del riduttore con l'anta
  NS.angMaxCorsaRid = 0; // var.  interna: angolo massimo di apertura dell'anta se si usa tutta la corsa utile del motoriduttore (corsa utile = corsa totale - 20mm)
  NS.angMcMax = 0; // angolo massimo effettivamente ottenibile, come valore più basso tra i tre precedenti
  NS.angoloMaxControMuro = 3; //radianti, evita che l'anta sbatta contro il muro laterale, se questo esiste.
  NS.velocitaAntaBraccio = 0;
  NS.corsaBraccioDritto = 0;
  NS.corsaUsata = 0;
  /**#@- */

  NS.SVGElAttr = {
    "xmlns": NS.svgNS,
    "version": "1.1",
    "xmlns:xlink": NS.xlinkNS,
    "width": NS.SVGelW,
    "height": NS.SVGelH,
    "viewBox": "0 0 " + NS.SVGelW + " " + NS.SVGelH
  };


  NS.vpAttr = {
    "id": "MyGateSimViewport",
    "fill": "#c0c0c0",
    "fill-opacity": "1",
    "fill-rule": "evenodd",
    "stroke": "#6f6f6f",
    "stroke-width": "3",
    "stroke-opacity": "1",
    "stroke-linecap": "round",
    "stroke-linejoin": "round",
    "stroke-miterlimit": "4"
  };
  
  NS.EGdefs = [
    [
      [null, "id", "defrettax"],
      [null, "d", "m 0,0 4800,0"],
        "path"],
    [
      [null, "id", "defrettay"],
      [null, "d", "m 0,0 0,2400"],
        "path"],
      "definizioni"];
      
    NS.EGpatternGrid = [
    [
      [null, "d", "m 0,450 500,0 M 0,350 500,350 M 0,250 500,250 M 0,150 500,150 M 450,0 450,500 M 350,0 350,500 M 250,0 250,500 M 150,0 l 0,500"],
      [null, "stroke", "#ddd"],
        "path"],
    [
      [null, "d", "m 0,50 500,0 M 50,0 50,500"],
      [null, "stroke", "#ade"],
        "path"],
      "patternGrid"];
      
  NS.EGfiltroOmbra = [
    [
      [null, "result", "sfocatura"],
      [null, "stdDeviation", "6"],
        "fegaussianblur"],
    [
      [null, "in", "SourceGraphic"],
      [null, "in2", "sfocatura"],
      [null, "operator", "out"],
      [null, "result", "combina1"],
        "fecomposite"],
    [
      [null, "flood-color", "black"],
      [null, "flood-opacity", "0.2"],
      [null, "result", "nerizza"],
        "feflood"],
    [
      [null, "in", "nerizza"],
      [null, "in2", "combina1"],
      [null, "operator", "in"],
      [null, "result", "ombra"],
        "fecomposite"],
    [
      [null, "in", "ombra"],
      [null, "in2", "SourceGraphic"],
      [null, "operator", "over"],
        "fecomposite"],
      "filtroOmbra"]; 
      
  NS.EGgauge = [
    [
      [null, "d", "M 0,0 40,0 A 40,40 0 1 1 120,0 L 160,0 A 80,80 1 0 0 0,0 z"],
      [null, "stroke", "none"],
      [null, "fill", "#dea"],
      [null, "filter", "url(#filtroOmbra)"],
        "path"],
    [
      [null, "d", "M 0,0 40,0 A 40,40 0 1 1 120,0 L 160,0 A 80,80 1 0 0 0,0 z"],
      [null, "stroke", "none"],
      [null, "fill", "#ade"],
      [null, "filter", "url(#filtroOmbra)"],
        "path"],
    [
      [null, "x", "50"],
      [null, "y", "0"],
      [null, "font-family", "Verdana"],
      [null, "font-size", "22"],
      [null, "fill", "#555"],
        "text"],
      "gauge"];

  NS.EGcerniera = [
    [
      [null, "id", "cernieraRett"],
      [null, "width", "100"],
      [null, "height", "20"],
      [null, "x", "-100"],
      [null, "y", "-10"],
      [null, "rx", "0"],
      [null, "ry", "0"],
        "rect"],
    [
      [null, "id", "xCerniera"],
      [null, "d", "m 0.5,41.74055 0,-83"],
        "path"],
    [
      [null, "id", "yCerniera"],
      [null, "d", "m -41,0.24055 83,0"],
        "path"],
    [
      [null, "id", "limiteAngolo"],
      [null, "stroke", "#ACCB52"],
      [null, "stroke-dasharray", "15"],
      [null, "stroke-dashoffset", "0"],
      [null, "fill", "#BA3D94"],
      [null, "fill-opacity", "0.25"],
      [null, "d", "M 0,0 1000,0"],
        "path"],
    [
      [null, "id", "fermo"],
      //[null,"stroke","#ACCB52"],
      [null, "fill", "#dadada"],
      [null, "fill-opacity", "0.25"],
      [null, "d", "M -0.05,16.6 C -12.8,16.6 -12.5,2.97 -12.5,2.97 l 0,-0.71 0,-0.72 12.45,0 12.65,0 0,0.72 0,0.71 c 0,0 0.3,13.63 -12.65,13.63 z M 17.6,-31.1 c 0.9,0 1.7,0.8 1.7,1.7 0,1 -0.8,1.8 -1.7,1.8 -1.1,0 -1.8,-0.8 -1.8,-1.8 0,-0.9 0.7,-1.7 1.8,-1.7 z m 0,49.6 c 0.9,0 1.7,0.9 1.7,1.8 0,0.9 -0.8,1.8 -1.7,1.8 -1.1,0 -1.8,-0.9 -1.8,-1.8 0,-0.9 0.7,-1.8 1.8,-1.8 z m -35,-49.6 c 0.9,0 1.7,0.8 1.7,1.7 0,1 -0.8,1.8 -1.7,1.8 -1,0 -1.8,-0.8 -1.8,-1.8 0,-0.9 0.8,-1.7 1.8,-1.7 z m 0,49.7 c 0.9,0 1.7,0.9 1.7,1.8 0,0.9 -0.8,1.8 -1.7,1.8 -1,0 -1.8,-0.9 -1.8,-1.8 0,-0.9 0.8,-1.8 1.8,-1.8 z m 2.5,-13.38 0,-19.02 c 0,-8.4 6.57,-15 14.85,-15 8.35,0 15.05,6.6 15.05,15 L 15,5.22 C 15,13.5 8.3,20.1 -0.05,20.1 -8.33,20.1 -14.9,13.5 -14.9,5.22 z m -7,19.38 0,-58.8 44,0 0,58.8 z"],
        "path"],
      "cerniera"];

  NS.EGstaffa1 = [
    [
      [null, "id", "imgStaffa1"],
      [null, "opacity", "0.5"],
      [null, "fill", "#fff"],
      [null, "d", "m 80.99,140.1 c 0.13,-3.5 -2.64,-6.3 -6.1,-6.3 -3.46,0 -6.23,2.8 -6.1,6.3 -0.13,3.5 2.64,6.3 6.1,6.3 3.46,0 6.23,-2.8 6.1,-6.3 z m 0,-30.1 c 0.13,-3.5 -2.64,-6.3 -6.1,-6.3 -3.46,0 -6.23,2.8 -6.1,6.3 -0.13,3.5 2.64,6.3 6.1,6.3 3.46,0 6.23,-2.8 6.1,-6.3 z m 0,-29.84 c 0.13,-3.5 -2.64,-6.3 -6.1,-6.3 -3.46,0 -6.23,2.8 -6.1,6.3 -0.13,3.5 2.64,6.3 6.1,6.3 3.46,0 6.23,-2.8 6.1,-6.3 z m -80.99,-37.2 57.98,105.34 c 3.68,6.9 11.63,10.4 19.23,8.5 7.6,-2 12.88,-8.9 12.78,-16.7 v -130.14"],
        "path"],
    [
      [null, "id", "lamiera1"],
      [null, "d", "m 0,6 h 25.9 m 37.88,0 h 26.21 m -25.91,4 c 0,4.07 -6.1,4.07 -6.1,0 v -10 h -25.98 v 10 c -0.17,3.83 -5.83,3.83 -6,0 v -10 h -26 v 43 l 10.5,18.9 c 1.02,1.93 3.01,3.16 5.2,3.2 h 68.28 c 3.31,0 6,-2.69 6,-6 v -49.1 -10 h -25.9 z m 17,40.1 c 0,-3.43 -2.67,-6.26 -6.1,-6.26 -3.43,0 -6.09,2.83 -6.1,6.26 0,3.43 2.67,6.26 6.1,6.26 3.43,0 6.09,-2.83 6.1,-6.26 z"],
        "path"],
    [
      [null, "id", "xStaffa1"],
      [null, "d", "m 75,15 0,70"],
        "path"],
    [
      [null, "id", "yStaffa1"],
      [null, "d", "m 40,50 70,0"],
        "path"],
      "staffa1"];

  NS.EGstaffa2 = [
    [
      [null, "id", "imgStaffa2"],
      [null, "opacity", "0.5"],
      [null, "fill", "#fff"],
      [null, "d", "m 0,43 57.9,105.3 c 3.69,6.9 11.63,10.4 19.22,8.5 7.59,-2 12.87,-8.9 12.78,-16.7 v -130.1 m -9,100 c 0.13,-3.5 -2.64,-6.3 -6.1,-6.3 -3.46,0 -6.23,2.8 -6.1,6.3 -0.13,3.5 2.64,6.3 6.1,6.3 3.46,0 6.23,-2.8 6.1,-6.3 z m 0,30.1 c 0.13,-3.5 -2.64,-6.3 -6.1,-6.3 -3.46,0 -6.23,2.8 -6.1,6.3 -0.13,3.5 2.64,6.3 6.1,6.3 3.46,0 6.23,-2.8 6.1,-6.3 z"],
        "path"],
    [
      [null, "id", "lamiera2"],
      [null, "d", "m 63.7,6 h 26.2 m -89.9,0 h 25.9 m 55.21,44.1 c 0,-3.4 -2.67,-6.3 -6.1,-6.3 -3.43,0 -6.09,2.9 -6.1,6.3 0,3.4 2.67,6.3 6.1,6.3 3.43,0 6.09,-2.9 6.1,-6.3 z m 0,30.01 c 0,-3.4 -2.67,-6.3 -6.1,-6.3 -3.43,0 -6.09,2.9 -6.1,6.3 0,3.4 2.67,6.3 6.1,6.3 3.43,0 6.09,-2.9 6.1,-6.3 z m 3,14.9 h -51.8 c -2.17,0 -4.15,-1.2 -5.2,-3.1 l -27.11,-48.91 v -33 -10 h 26.11 v 10 c 0.61,3.3 5.29,3.3 5.9,0 v -10 h 26 v 10 c 0,4.1 6.1,4.1 6.1,0 v -10 h 25.8 v 89.11 c 0,3.2 -2.6,5.8 -5.8,5.9 z"],
        "path"],
    [
      [null, "id", "xStaffa2"],
      [null, "d", "m 75,45 0,70"],
        "path"],
    [
      [null, "id", "yStaffa2"],
      [null, "d", "m 40,80 70,0"],
        "path"],
      "staffa2"];

  NS.EGstaffa3 = [
    [
      [null, "id", "imgStaffa3"],
      [null, "opacity", "0.5"],
      [null, "fill", "#fff"],
      [null, "d", "m 0,43 58,105.3 c 3.69,6.9 11.63,10.4 19.22,8.5 7.59,-2 12.87,-8.9 12.78,-16.7 v -130.1 m -9,130.1 c 0.13,-3.5 -2.64,-6.3 -6.1,-6.3 -3.46,0 -6.23,2.8 -6.1,6.3 -0.13,3.5 2.64,6.3 6.1,6.3 3.46,0 6.23,-2.8 6.1,-6.3 z"],
        "path"],
    [
      [null, "id", "lamiera3"],
      [null, "d", "m 63.8,6 h 26.2 m -90,0 h 25.9 m 64.35,-6 h -26.15 v 10 c -0.8,3 -5,3 -5.8,0 v -10 h -26.2 v 10 c -0.6,3.3 -5.3,3.3 -5.9,0 v -10 h -26.2 v 42.98 l 43.7,79.02 c 1.1,1.9 3.1,3 5.3,3 h 35.15 c 3.3,0.1 6,-2.6 6.1,-5.9 z m -9,50.08 c 0,-3.4 -2.7,-6.3 -6.1,-6.3 -3.4,0 -6.1,2.9 -6.1,6.3 0,3.4 2.7,6.3 6.1,6.3 3.4,0 6.1,-2.9 6.1,-6.3 z m 0,30 c 0,-3.4 -2.7,-6.3 -6.1,-6.3 -3.4,0 -6.1,2.9 -6.1,6.3 0,3.4 2.7,6.3 6.1,6.3 3.4,0 6.1,-2.9 6.1,-6.3 z m 0,29.92 c 0,-3.4 -2.7,-6.3 -6.1,-6.3 -3.4,0 -6.1,2.9 -6.1,6.3 0,3.4 2.7,6.3 6.1,6.3 3.4,0 6.1,-2.9 6.1,-6.3 z"],
        "path"],
    [
      [null, "id", "xStaffa3"],
      [null, "d", "m 75,75 0,70"],
        "path"],
    [
      [null, "id", "yStaffa3"],
      [null, "d", "m 40,110 70,0"],
        "path"],
      "staffa3"];
      
  NS.EGstaffa4 = [
    [
      [null, "id", "lamiera4"],
      [null, "d", "m 80.9,140.1 c 0,-3.5 -2.6,-6.3 -6.1,-6.3 -3.5,0 -6.1,2.8 -6.1,6.3 0,3.5 2.6,6.3 6.1,6.3 3.5,0 6.1,-2.8 6.1,-6.3 z m 0,-30.1 c 0,-3.5 -2.6,-6.3 -6.1,-6.3 -3.5,0 -6.1,2.8 -6.1,6.3 0,3.5 2.6,6.3 6.1,6.3 3.5,0 6.1,-2.8 6.1,-6.3 z m 0,-29.9 c 0,-3.5 -2.6,-6.3 -6.1,-6.3 -3.5,0 -6.1,2.8 -6.1,6.3 0,3.5 2.6,6.3 6.1,6.3 3.5,0 6.1,-2.8 6.1,-6.3 z m 0,-30 c 0,-3.5 -2.6,-6.3 -6.1,-6.3 -3.5,0 -6.1,2.8 -6.1,6.3 0,3.5 2.6,6.3 6.1,6.3 3.5,0 6.1,-2.8 6.1,-6.3 z m 9,-50.1 h -26.2 c 0,3.3 0,6.7 0,10 -0.8,3 -5,3 -5.8,0 v -10 h -25.9 v 10 c 0,4.1 -6.1,4.1 -6.1,0 0,-3.3 0,-6.7 0,-10 h -25.9 c 0,14.3 0,28.7 0,43 l 57.9,105.3 c 3.7,6.9 11.6,10.4 19.2,8.5 7.6,-2 12.9,-8.9 12.8,-16.7 0,-46.7 0,-93.4 0,-140.1 z"],
        "path"],
    [
      [null, "id", "xStaffa4"],
      [null, "d", "m 75,105 0,70"],
        "path"],
    [
      [null, "id", "yStaffa4"],
      [null, "d", "m 40,140 70,0"],
        "path"],
      "staffa4"];

  NS.EGstaffaHook1 = [
    [
      [null, "d", "m 159.53,77.6 a 14.98,14.98 0 1 0 -29.96,0 14.98,14.98 0 0 0 29.96,0 z m -86.881,0 a 14.979,14.979 0 1 0 -29.958,0 14.979,14.979 0 0 0 29.958,0 z M 11.09,39.8 c 2.773,2.8 4.387,6.7 4.387,10.6 0,3.9 -1.614,7.8 -4.387,10.6 -2.7717,2.8 -6.6682,4.4 -10.58915,4.4 l 0,109.8 199.71915,0 0,-109.8 c -3.92,0 -7.82,-1.6 -10.59,-4.4 -2.77,-2.8 -4.39,-6.7 -4.39,-10.6 0,-3.9 1.62,-7.8 4.39,-10.6 2.77,-2.8 6.67,-4.4 10.59,-4.4 l 0,-29.9 0,-5 -199.72,0 0,5 0,29.9 c 3.921,0 7.8175,1.6 10.59,4.4 z M 177.5,38.9 a 3.745,3.745 0 1 0 -7.49,0 3.745,3.745 0 0 0 7.49,0 z m 0,122.8 a 3.745,3.745 0 1 0 -7.49,0 3.745,3.745 0 0 0 7.49,0 z m -146.792,0 a 3.7447,3.7447 0 1 0 -7.489,0 3.7447,3.7447 0 1 0 7.489,0 z m 0,-122.8 a 3.7447,3.7447 0 1 0 -7.489,0 3.7447,3.7447 0 1 0 7.489,0 z"],
        "path"],
    [
      [null, "d", "m 143,52 0,50"],
        "path"],
    [
      [null, "d", "m 120,77 45,0"],
        "path"],
    [
      [null, "d", "M 0.5691,5.5 200.22,5.5"],
        "path"],
    [
      [null, "width", "230"],
      [null, "height", "155"],
      [null, "x", "-27"],
      [null, "y", "22"],
      [null, "rx", "15"],
      [null, "ry", "15"],
      [null, "fill", "#e3e3e3"],
      [null, "fill-opacity", "0.65"],
        "rect"],
      "staffaHook1"];
      
  NS.EGstaffaHook2 = [
    [
      [null, "d", "m 77.6,40.5 a 15,15 0 1 0 0,30 15,15 0 0 0 0,-30 z m 0,87.5 a 15,15 0 1 0 0,30 15,15 0 0 0 0,-30 z m -37.8,62 c 2.8,-3 6.7,-5 10.6,-5 3.9,0 7.8,2 10.6,5 2.8,3 4.4,7 4.4,10 L 176,200 176,0.5 65.4,0.5 c 0,4 -1.6,8 -4.4,10 -2.8,3 -6.7,5 -10.6,5 -3.9,0 -7.8,-2 -10.6,-5 -2.8,-2 -4.4,-6 -4.4,-10 l -29.9,0 -5,0 0,199.5 5,0 29.9,0 c 0,-3 1.6,-7 4.4,-10 z M 38.9,22.5 a 4,4 0 1 0 0,8 4,4 0 0 0 0,-8 z m 124.1,0 a 4,4 0 1 0 0,8 4,4 0 0 0 0,-8 z m 0,147.5 a 4,4 0 1 0 0,8 4,4 0 0 0 0,-8 z m -124.1,0 a 4,4 0 1 0 0,8 4,4 0 0 0 0,-8 z"],
        "path"],
    [
      [null, "d", "m 77.5,30.5 0,50"],
        "path"],
    [
      [null, "d", "m 103,55.5 -50.5,0"],
        "path"],
    [
      [null, "d", "M 5.5,200 5.5,0.65"],
        "path"],
    [
      [null, "width", "155"],
      [null, "height", "230"],
      [null, "x", "22"],
      [null, "y", "-3"],
      [null, "rx", "15"],
      [null, "ry", "15"],
      [null, "fill", "#e3e3e3"],
      [null, "fill-opacity", "0.65"],
        "rect"],
      "staffaHook2"];

  NS.EGcorta = [
    [
      [null, "d", "M 6.060793,45.959751 C 6.062083,42.810459 3.1824318,39.94416 0.017188,39.94416 c -3.1652438,0 -6.0448925,2.866299 -6.043605,6.015591 -0.00129,3.149293 2.8783612,6.015592 6.043605,6.015592 3.1652438,0 6.0448925,-2.866299 6.043605,-6.015592 z m 17.456395,-44.5138323 -47,-0.084 0,35.2558213 c 0.0056,6.58962 2.541016,13.0484 6.890784,17.6433 4.349768,4.59491 10.4605973,7.26948 16.60920942,7.26948 6.14862118,0 12.25945458,-2.67457 16.60922258,-7.26948 4.349768,-4.5949 6.885016,-11.05368 6.890784,-17.64328 z"],
        "path"],
    [
      [null, "fill", "none"],
      [null, "d", "m -18.366051,6.8888687 36.766478,0"],
        "path"],
    [
      [null, "d", "M 0,21 0,71"],
        "path"],
    [
      [null, "d", "m -25,46 50,0"],
        "path"],
      "corta"];
      
  NS.EGriduttoreRuota = [
    [
      [null, "d", "m 1.72,72.7 -1,8 1,51.3 c 0,2 1,4 4,4 l 28.88,2 c 2.7,0 4.7,-2 4.7,-5 l 5,-106.3 c 0,-3 -2,-5 -4,-5 l -29.6,-1 c -1.98,0 -3.98,2 -3.98,4 z"],
        "path"],
    [
      [null, "d", "m 45.3,11.7 c 0,0 -5,94.3 -5,94.3 1,2 2,4 4,4 l 69.7,3 c 2,0 4,-1 4,-3 0,-2 0,-4 0,-5 l 4,0 c 1,0 1,0 1,-1 l 2,-40.3 -1,-1 -4,0 c 2,-21 2,-41 3,-48 -2,0 -77.7,-3 -77.7,-3 z"],
        "path"],
    [
      [null, "d", "m 117,4.72 0,9.98 -65.7,-3 0,-10.98 65.7,0 z"],
        "path"],
    [
      [null, "fill", "none"],
      [null, "d", "m 55.3,3.72 58.7,0 M 62.3,28.7 c 0,10 9,19 19.1,20 11,0 20.6,-8 21.6,-19 l 1,-15 -41.7,-2 z m -51.6,22 C 8.72,68.7 7.72,86.7 7.72,105 M 42.3,66.7 c 0,20 13,37.3 33.1,39.3 0,0 6,0 6,0 28.6,0 37.6,-21.3 38.6,-43.3 1,-1 -1,35 -2,41.3"],
        "path"],
      "ruota"];

  NS.EGinox3 = [
    [
      [null, "width", "350"],
      [null, "height", "32"],
      [null, "x", "-390"],
      [null, "y", "-16"],
      [null, "fill", "#e3e3e3"],
        "rect"],
    [
      [null, "d", "m 5.8986,-0.03438 a 5.9087,5.879 0 1 0 -11.8175,0 5.9087,5.879 0 0 0 11.8175,0 z M -44.304,15.888 l 0,-31.999 c 1.284,-2.432 1.676,-2.976 3.129,-5.292 l 57.81,-0.117 c 0.329,0.326 2.696,3.727 2.722,4.252 L 19.969,0.01813 19.363,17.171 c -0.02,0.496 -2.389,3.253 -2.717,3.613 -0.499,0.01 -59.183,0.02 -59.183,0.02 z"],
        "path"],
      "inox3"];

  NS.EGinox4 = [
    [
      [null, "width", "450"],
      [null, "height", "32"],
      [null, "x", "-490"],
      [null, "y", "-16"],
      [null, "fill", "#e3e3e3"],
        "rect"],
    [
      [null, "d", "m 5.8986,-0.03438 a 5.9087,5.879 0 1 0 -11.8175,0 5.9087,5.879 0 0 0 11.8175,0 z M -44.304,15.888 l 0,-31.999 c 1.284,-2.432 1.676,-2.976 3.129,-5.292 l 57.81,-0.117 c 0.329,0.326 2.696,3.727 2.722,4.252 L 19.969,0.01813 19.363,17.171 c -0.02,0.496 -2.389,3.253 -2.717,3.613 -0.499,0.01 -59.183,0.02 -59.183,0.02 z"],
        "path"],
      "inox4"];
      
  NS.EGinox5 = [
    [
      [null, "width", "550"],
      [null, "height", "32"],
      [null, "x", "-590"],
      [null, "y", "-16"],
      [null, "fill", "#e3e3e3"],
        "rect"],
    [
      [null, "d", "m 5.8986,-0.03438 a 5.9087,5.879 0 1 0 -11.8175,0 5.9087,5.879 0 0 0 11.8175,0 z M -44.304,15.888 l 0,-31.999 c 1.284,-2.432 1.676,-2.976 3.129,-5.292 l 57.81,-0.117 c 0.329,0.326 2.696,3.727 2.722,4.252 L 19.969,0.01813 19.363,17.171 c -0.02,0.496 -2.389,3.253 -2.717,3.613 -0.499,0.01 -59.183,0.02 -59.183,0.02 z"],
        "path"],
      "inox5"];

    NS.EGinox6 = [
    [
      [null, "width", "650"],
      [null, "height", "32"],
      [null, "x", "-690"],
      [null, "y", "-16"],
      [null, "fill", "#e3e3e3"],
        "rect"],
    [
      [null, "d", "m 5.8986,-0.03438 a 5.9087,5.879 0 1 0 -11.8175,0 5.9087,5.879 0 0 0 11.8175,0 z M -44.304,15.888 l 0,-31.999 c 1.284,-2.432 1.676,-2.976 3.129,-5.292 l 57.81,-0.117 c 0.329,0.326 2.696,3.727 2.722,4.252 L 19.969,0.01813 19.363,17.171 c -0.02,0.496 -2.389,3.253 -2.717,3.613 -0.499,0.01 -59.183,0.02 -59.183,0.02 z"],
        "path"],
      "inox6"];

  NS.EGinoxAce3 = [
    [
      [null, "width", "350"],
      [null, "height", "32"],
      [null, "x", "-390"],
      [null, "y", "-16"],
      [null, "fill", "#e3e3e3"],
        "rect"],
    [
      [null, "d", "m 5.8986,-0.03438 a 5.9087,5.879 0 1 0 -11.8175,0 5.9087,5.879 0 0 0 11.8175,0 z M -44.304,15.888 l 0,-31.999 c 1.284,-2.432 1.676,-2.976 3.129,-5.292 l 57.81,-0.117 c 0.329,0.326 2.696,3.727 2.722,4.252 L 19.969,0.01813 19.363,17.171 c -0.02,0.496 -2.389,3.253 -2.717,3.613 -0.499,0.01 -59.183,0.02 -59.183,0.02 z"],
        "path"],
      "inoxAce3"];

  NS.EGinoxAce4 = [
    [
      [null, "width", "450"],
      [null, "height", "32"],
      [null, "x", "-490"],
      [null, "y", "-16"],
      [null, "fill", "#e3e3e3"],
        "rect"],
    [
      [null, "d", "m 5.8986,-0.03438 a 5.9087,5.879 0 1 0 -11.8175,0 5.9087,5.879 0 0 0 11.8175,0 z M -44.304,15.888 l 0,-31.999 c 1.284,-2.432 1.676,-2.976 3.129,-5.292 l 57.81,-0.117 c 0.329,0.326 2.696,3.727 2.722,4.252 L 19.969,0.01813 19.363,17.171 c -0.02,0.496 -2.389,3.253 -2.717,3.613 -0.499,0.01 -59.183,0.02 -59.183,0.02 z"],
        "path"],
      "inoxAce4"];

  NS.EGridutt3 = [
    [
      [null, "fill", "#555"],
      [null, "d", "m 504.56,-23.421 10.17,-2.083 14.15,0 11.36,2.083 0,46.115 -11.36,2.38 -14.15,0 -10.17,-2.38 z"],
        "path"],
    [
      [null, "d", "m 6.1855,-0.16194 c 0,-3.14846 -2.8792,-6.01306 -6.0436,-6.01306 -3.1644,0 -6.0436,2.8646 -6.0436,6.01306 0,3.14844 2.8792,6.01314 6.0436,6.01314 3.1644,0 6.0436,-2.8647 6.0436,-6.01314 z M 119.46,-23.022 l 384.83,0 0,44.88 -384.83,0 z m -75.365,89.949 9.934,0 50.081,-0.03 c 3.73,-0.02 7.27,-1.574 9.86,-4.15 2.59,-2.576 4.05,-6.097 4.02,-9.852 l 0,-26.575 2.41,-2.495 0,-47.098 -2.42,-4.4 -87.879,0 -1.9,3.615 0.03,47.819 1.948,2.025 -0.01,27.271 c -0.01,3.692 1.519,7.214 4.108,9.789 2.589,2.576 6.228,4.076 9.889,4.076 m -58.969,-90.37 43.134,0 0,46.423 -43.134,0 -4.793,-4.488 0,-37.447 z"],
        "path"],
    [
      [null, "d", "m 110.87,19.928 c 0,20.711 -16.789,37.5 -37.5,37.5 -20.711,0 -37.5,-16.789 -37.5,-37.5 0,-20.71049 16.789,-37.5 37.5,-37.5 20.711,0 37.5,16.78951 37.5,37.5 z"],
        "path"],
      "ridutt3"];

  NS.EGridace3 = [
    [
      [null, "fill", "#555"],
      [null, "d", "m 662,-23.2 10,-2.1 h 14 l 12,2.1 v 46.1 l -12,2.4 h -14 l -10,-2.4 z"],
        "path"],
    [
      [null, "d", "m 6.05,0.024 c 0,-3.234 -2.9,-6.064 -6.008,-6.064 -3.192,0 -6.092,2.83 -6.092,6.064 0,3.236 2.9,6.056 6.092,6.056 3.108,0 6.008,-2.82 6.008,-6.056 z m 317.95,23.476 v -46.7 m -342.2,23.224 v -18.024 c 0,-0.8 0.7,-1.2 1.3,-1.6 l 46.2,-27 c 1.4,-0.8 3.5,-0.8 4.6,-0.8 h 201.1 l 82,12.9 3,3 4,8.1 h 339 v 46.7 h -339 l -4,8.3 -3,3 -82,12.8 h -201.1 c -1.1,0 -3.2,0 -4.6,-0.8 l -46.3,-27 c -0.5,-0.4 -1.3,-1 -1.3,-1.6 v -17.976"],
        "path"],
    [
      [null, "d", "m 196,0.011 c 0,0 0,-4.331 -1,-6.721 -1,-5.19 -5,-14.99 -5,-14.99 -7,-19.3 17,-31 28,-14.3 9,12.1 12,24.4 12,36.011 m -34,0 c 0,0 0,4.329 -1,6.769 -1,5.12 -5,15.02 -5,15.02 -7,19.3 17,31.3 28,14.4 9,-12.2 12,-24.5 12,-36.189"],
        "path"],
      "ridace3"];
      
  NS.EGridace4 = [
    [
      [null, "fill", "#555"],
      [null, "d", "m 762,-23.2 10,-2.1 h 14 l 12,2.1 v 46.1 l -12,2.4 h -14 l -10,-2.4 z"],
        "path"],
    [
      [null, "d", "m 6.05,0.024 c 0,-3.234 -2.9,-6.064 -6.008,-6.064 -3.192,0 -6.092,2.83 -6.092,6.064 0,3.236 2.9,6.056 6.092,6.056 3.108,0 6.008,-2.82 6.008,-6.056 z m 317.95,23.476 v -46.7 m -342.2,23.224 v -18.024 c 0,-0.8 0.7,-1.2 1.3,-1.6 l 46.2,-27 c 1.4,-0.8 3.5,-0.8 4.6,-0.8 h 201.1 l 82,12.9 3,3 4,8.1 439,0 v 46.7 l -439,0 -4,8.3 -3,3 -82,12.8 h -201.1 c -1.1,0 -3.2,0 -4.6,-0.8 l -46.3,-27 c -0.5,-0.4 -1.3,-1 -1.3,-1.6 v -17.976"],
        "path"],
    [
      [null, "d", "m 196,0.011 c 0,0 0,-4.331 -1,-6.721 -1,-5.19 -5,-14.99 -5,-14.99 -7,-19.3 17,-31 28,-14.3 9,12.1 12,24.4 12,36.011 m -34,0 c 0,0 0,4.329 -1,6.769 -1,5.12 -5,15.02 -5,15.02 -7,19.3 17,31.3 28,14.4 9,-12.2 12,-24.5 12,-36.189"],
        "path"],
      "ridace4"];

  NS.EGridutt4 = [
    [
      [null, "fill", "#555"],
      [null, "d", "m 604.56,-23.421 10.17,-2.083 14.15,0 11.36,2.083 0,46.115 -11.36,2.38 -14.15,0 -10.17,-2.38 z"],
        "path"],
    [
      [null, "d", "M 6.19,-0.162 C 6.19,-3.31 3.31,-6.18 0.142,-6.18 -3.02,-6.18 -5.9,-3.31 -5.9,-0.162 -5.9,2.99 -3.02,5.85 0.142,5.85 3.31,5.85 6.19,2.99 6.19,-0.162 z M 119,-23 l 485,0 0,44.9 -485,0 z m -74.9,89.9 9.9,0 50,0 c 4,0 7,-1.6 10,-4.2 3,-2.5 4,-6.1 4,-9.8 l 0,-26.6 2,-2.5 0,-47.1 -2,-4.4 -87.9,0 -1.9,3.6 0,47.9 2,2 0,27.3 c 0,3.6 1.5,7.2 4.1,9.7 2.6,2.6 6.2,4.1 9.9,4.1 m -59,-90.3 43.1,0 0,46.4 -43.1,0 -4.8,-4.5 0,-37.5 z"],
        "path"],
    [
      [null, "d", "m 110.87,19.928 c 0,20.711 -16.789,37.5 -37.5,37.5 -20.711,0 -37.5,-16.789 -37.5,-37.5 0,-20.71049 16.789,-37.5 37.5,-37.5 20.711,0 37.5,16.78951 37.5,37.5 z"],
        "path"],
      "ridutt4"];

  NS.EGridutt5 = [
    [
      [null, "fill", "#555"],
      [null, "d", "m 705,-23.4 10,-2.1 h 14 l 11,2.1 v 46.1 l -11,2.4 h -14 l -10,-2.4 z"],
        "path"],
    [
      [null, "d", "m 6.19,-0.162 c 0,-3.148 -2.88,-6.018 -6.048,-6.018 -3.162,0 -6.042,2.87 -6.042,6.018 0,3.152 2.88,6.012 6.042,6.012 3.168,0 6.048,-2.86 6.048,-6.012 z m 112.81,-22.838 h 585 v 44.9 h -585 z m -74.9,89.9 h 9.9 50 c 4,0 7,-1.6 10,-4.2 3,-2.5 4,-6.1 4,-9.8 v -26.6 l 2,-2.5 v -47.1 l -2,-4.4 h -87.9 l -1.9,3.6 v 47.9 l 2,2 v 27.3 c 0,3.6 1.5,7.2 4.1,9.7 2.6,2.6 6.2,4.1 9.9,4.1 m -59,-90.3 h 43.1 v 46.4 h -43.1 l -4.8,-4.5 v -37.5 z"],
        "path"],
    [
      [null, "d", "m 110.87,19.928 c 0,20.711 -16.789,37.5 -37.5,37.5 -20.711,0 -37.5,-16.789 -37.5,-37.5 0,-20.71049 16.789,-37.5 37.5,-37.5 20.711,0 37.5,16.78951 37.5,37.5 z"],
        "path"],
      "ridutt5"];

  NS.EGridutt6 = [
    [
      [null, "fill", "#555"],
      [null, "d", "m 805,-23.4 10,-2.1 h 14 l 11,2.1 v 46.1 l -11,2.4 h -14 l -10,-2.4 z"],
        "path"],
    [
      [null, "d", "m 6.19,-0.162 c 0,-3.148 -2.88,-6.018 -6.048,-6.018 -3.162,0 -6.042,2.87 -6.042,6.018 0,3.152 2.88,6.012 6.042,6.012 3.168,0 6.048,-2.86 6.048,-6.012 z m 112.81,-22.838 h 685 v 44.9 h -685 z m -74.9,89.9 h 9.9 50 c 4,0 7,-1.6 10,-4.2 3,-2.5 4,-6.1 4,-9.8 v -26.6 l 2,-2.5 v -47.1 l -2,-4.4 h -87.9 l -1.9,3.6 v 47.9 l 2,2 v 27.3 c 0,3.6 1.5,7.2 4.1,9.7 2.6,2.6 6.2,4.1 9.9,4.1 m -59,-90.3 h 43.1 v 46.4 h -43.1 l -4.8,-4.5 v -37.5 z"],
        "path"],
    [
      [null, "d", "m 110.87,19.928 c 0,20.711 -16.789,37.5 -37.5,37.5 -20.711,0 -37.5,-16.789 -37.5,-37.5 0,-20.71049 16.789,-37.5 37.5,-37.5 20.711,0 37.5,16.78951 37.5,37.5 z"],
        "path"],
      "ridutt6"];

  NS.EGbDrittoHook = [
    [
      [null, "d", "m 399,7 c -4,0 -7,-3 -7,-7 0,-4 3,-7 7,-7 4,0 7,3 7,7 0,4 -3,7 -7,7 z M 0.823,12 C -5.53,12 -10.6,7 -10.6,0 -10.6,-6 -5.41,-11 0.938,-11 7.16,-11 12,-6 12.2,0 12.2,8 7.16,12 0.823,12 z M -19,0 C -19.1,11 -10.2,20 0.781,20 4.67,20 8.3,19 11.4,17 L 404,17 c 9,0 17,-7 17,-17 0,-10 -8,-17 -17,-17 L 11,-17 C 8.05,-19 4.63,-20 0.829,-20 -9.85,-19 -18.9,-11 -19,0 z"],
        "path"],
      "bDrittoHook"];


  NS.EGbCurvoHook = [
    [
      [null, "d", "M 7.42,0 C 7.42,4 4.06,8 -0.039,8 -4.13,8 -7.44,4 -7.42,0 c 0,-4 3.36,-7 7.461,-7 4.009,0 7.279,3 7.379,7 M 382,0 c 0,4 -3,7 -7,7 -4,0 -7,-3 -7,-7 0,-4 3,-7 7,-7 4,0 7,3 7,7 M 101,30 C 84.8,32 68,28 55.2,18 L 10.6,-14 c -8.59,-6 -19.01,-3 -24.2,5 -5.2,8 -2.4,18 4.73,24 L 35.6,47 c 20.2,14 46.1,20 70.4,16 0,0 286,-47 287,-47 4,-1 4,-4 4,-6 0,-2 -4,-23 -5,-26 -1,-3 -2,-4 -5,-4 z"],
        "path"],
      "bCurvoHook"];

  NS.EGanta = [
    [
      [null, "cx", "0"],
      [null, "cy", "0"],
      [null, "r", "20"],
        "circle"],
    [
      [null, "name", "Dim"],
      [null, "width", "1000"],
      [null, "height", "30"],
      [null, "x", "0"],
      [null, "y", "-15"],
        "rect"],
    [
      [null, "d", "m -0.09375,-41.5 0,83"],
        "path"],
    [
      [null, "d", "m 41.40625,0 -83,0"],
        "path"],
      "anta"];

  NS.EGapertura = [
    [
      [null, "id", "angoloApertura"],
      [null, "stroke", "#ACCB52"],
      [null, "fill", "#BA3D94"],
      [null, "fill-opacity", "0.25"],
      [null, "d", "M0 0 A 20 20, 0, 0, 0, 125 125 L 125 80 Z"],
        "path"],
      "apertura"];

  NS.EGbordo = [
    [
      [null, "id", "Bordo_viewport"],
      [null, "width", NS.SVGelW],
      [null, "height", NS.SVGelH],
      [null, "x", "0"],
      [null, "y", "0"],
      [null, "fill", "none"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
      "bordiVP"];

  NS.EGquota = [
    [
      [null, "points", "0,0 100,0 100,100"],
      [null, "fill", "none"],
        "polyline"],
    [
      [null, "width", "90"],
      [null, "height", "30"],
      [null, "x", "0"],
      [null, "y", "0"],
      [null, "rx", "5"],
      [null, "ry", "5"],
      [null, "fill", "#ACCB52"], //#d4d4d4
      [null, "fill-opacity", "0.75"],
      [null, "stroke", "none"],
        "rect"],
    [
      [null, "x", "0"],
      [null, "y", "0"],
      [null, "font-family", "arial"],
      [null, "font-size", "20"],
      [null, "fill", "#fff"],
      [null, "stroke", "none"],
        "text"],
    [
      [null, "points", "0,0 100,0 100,100"],
      [null, "fill", "none"],
        "polyline"],
    [
      [null, "width", "90"],
      [null, "height", "30"],
      [null, "x", "0"],
      [null, "y", "0"],
      [null, "rx", "5"],
      [null, "ry", "5"],
      [null, "fill", "#ACCB52"],
      [null, "fill-opacity", "0.75"],
      [null, "stroke", "none"],
        "rect"],
    [
      [null, "x", "0"],
      [null, "y", "0"],
      [null, "font-family", "arial"],
      [null, "font-size", "20"],
      [null, "fill", "#fff"],
      [null, "stroke", "none"],
        "text"],
      "quota1"];


  NS.EGzoompiu = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 30.616,30.487 c 2.518,-2.519 6.574,-2.519 9.094,0 L 56.382,47.16 c 2.519,2.519 2.519,6.575 0,9.093 -2.519,2.52 -6.575,2.52 -9.094,0 L 30.616,39.582 c -2.52,-2.52 -2.52,-6.576 0,-9.095 z"],
      [null, "fill", "#fff"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 42.385,25.373 c 0,9.325 -7.563,16.881 -16.888,16.881 -9.325,0 -16.8851,-7.556 -16.8851,-16.881 0,-9.326 7.5601,-16.8856 16.8851,-16.8856 9.325,0 16.888,7.5596 16.888,16.8856 z"],
      [null, "fill", "#fff"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "2"],
        "path"],
    [
      [null, "d", "m 25.484,12.769 c -2.454,0 -4.433,1.987 -4.433,4.453 l 0,3.71 -3.696,0 c -2.454,0 -4.406,1.99 -4.406,4.45 0,2.47 1.952,4.45 4.406,4.45 l 3.696,0 0,3.68 c 0,2.48 1.979,4.46 4.433,4.46 2.455,0 4.434,-1.98 4.434,-4.46 l 0,-3.68 3.696,0 c 2.455,0 4.434,-1.98 4.434,-4.45 0,-2.46 -1.979,-4.45 -4.434,-4.45 l -3.696,0 0,-3.71 c 0,-2.466 -1.979,-4.453 -4.434,-4.453 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "zoompiu"];

  NS.EGzoommeno = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 30.616,30.487 c 2.518,-2.519 6.574,-2.519 9.094,0 L 56.382,47.16 c 2.519,2.519 2.519,6.575 0,9.093 -2.519,2.52 -6.575,2.52 -9.094,0 L 30.616,39.582 c -2.52,-2.52 -2.52,-6.576 0,-9.095 z"],
      [null, "fill", "#fff"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 42.385,25.373 c 0,9.325 -7.563,16.881 -16.888,16.881 -9.325,0 -16.8851,-7.556 -16.8851,-16.881 0,-9.326 7.5601,-16.8856 16.8851,-16.8856 9.325,0 16.888,7.5596 16.888,16.8856 z"],
      [null, "fill", "#fff"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "2"],
        "path"],
    [
      [null, "d", "m 12.94,25.37 0,0 c 0,-2.466 1.98,-4.448 4.43,-4.448 l 16.25,0 c 2.45,0 4.43,1.982 4.43,4.448 l 0,0 c 0,2.466 -1.98,4.448 -4.43,4.448 l -16.25,0 c -2.45,0 -4.43,-1.982 -4.43,-4.448 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "zoommeno"];
      
  NS.EGpulsanteMuro = [
    [
      [null, "d", "M 9,0 C 4,0 0,4 0,9 l 0,46 c 0,5 4,9 9,9 L 22.4,64 34.7,0 z M 38.9,0 26.6,64 55,64 c 5,0 9,-4 9,-9 L 64,9 C 64,4 60,0 55,0 z"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 48.3,15.8 c 1,0 1.9,0.9 1.9,2 l 0,18.6 c 0,1.1 -0.9,2 -1.9,2 -1.1,0 -2,-0.9 -2,-2 l 0,-18.6 c 0,-1.1 0.9,-2 2,-2 z m 10,-9.42 c 1.3,0.25 2.2,1.5 1.9,2.8 l -9,47.42 c -0.2,1.2 -1.5,2 -2.8,1.8 -1.3,-0.3 -2.2,-1.5 -1.9,-2.7 l 9,-47.42 C 55.8,6.98 57,6.14 58.3,6.38 z M 51.4,3.2 c 0,2.1 -0.1,7.8 -0.1,10 -2.6,0 -9.8,0.1 -10.3,0.1 0,-4.2 -0.1,-6.9 -0.1,-10.1 2.5,0 7.4,0 10.5,0 z M 17.5,15.7 c 1,0 1.9,0.9 1.9,2 l 0,18.6 c 0,1.1 -0.9,2 -1.9,2 -1.1,0 -2,-0.9 -2,-2 l 0,-18.6 c 0,-1.1 0.9,-2 2,-2 z M 27.6,6.33 c 1.3,0.25 2.1,1.5 1.9,2.8 l -9,47.37 c -0.3,1.3 -1.5,2.1 -2.8,1.8 -1.3,-0.2 -2.2,-1.4 -1.9,-2.7 l 9,-47.37 C 25,6.93 26.3,6.09 27.6,6.33 z M 20.7,3.1 c 0,2.1 -0.1,7.8 -0.1,10 -2.6,0 -7.6,0.1 -7.6,0.1 l 0,47.6 c 0,0 -2,0 -4,0 -3,0 -6,-2.1 -6,-6.5 L 3,9.4 c 0,-4.95 3.71,-6.3 7.9,-6.3 2.9,0 2.1,0 9.8,0 z"],
      [null, "fill", "#fff"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
      "pulsanteMuro"];

  NS.EGpulsanteA3 = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 37.625,44.117 -4.945,0 c 0,-1.047 -0.985,-4.336 -2.953,-9.867 l -13.524,0 c -1.937,5.453 -2.906,8.742 -2.906,9.867 l -4.7341,0 c 0,-0.578 2.0151,-5.574 6.0461,-14.989 4.032,-9.414 6.047,-14.589 6.047,-15.527 l 5.438,0 c 0,0.922 1.922,6.024 5.765,15.305 3.844,9.281 5.766,14.351 5.766,15.211 z M 28.648,31.179 C 24.977,22.007 23.141,17.132 23.141,16.554 l -0.258,0 c 0,0.485 -1.899,5.36 -5.695,14.625 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 58.438,40.578 c 0,3.172 -1.582,6.027 -4.747,8.566 -3.164,2.539 -7.722,3.957 -13.675,4.254 l -0.68,-2.883 c 4.734,-0.312 8.43,-1.258 11.086,-2.836 2.656,-1.578 3.984,-3.672 3.984,-6.281 0,-2.422 -0.992,-4.129 -2.976,-5.121 -1.985,-0.992 -4.875,-1.488 -8.672,-1.488 L 43.227,32 c 3.015,0 5.492,-0.461 7.429,-1.383 1.938,-0.922 2.907,-2.188 2.907,-3.797 0,-1.516 -0.61,-2.594 -1.829,-3.235 -1.218,-0.64 -3.109,-0.96 -5.671,-0.96 -1.922,0 -3.602,0.164 -5.039,0.492 l 0.281,-3.305 c 1.437,-0.422 3.695,-0.633 6.773,-0.633 2.844,0 5.035,0.606 6.574,1.817 1.539,1.211 2.309,2.652 2.309,4.324 0,3.437 -1.805,5.758 -5.414,6.961 l 0,0.234 c 1.984,0.375 3.629,1.281 4.934,2.719 1.304,1.437 1.957,3.219 1.957,5.344 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteAster3"];

  NS.EGpulsanteA4 = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 36.137,44.891 -4.945,0 c 0,-1.047 -0.985,-4.336 -2.954,-9.867 l -13.524,0 c -1.937,5.453 -2.906,8.742 -2.906,9.867 l -4.7335,0 c 0,-0.578 2.015,-5.574 6.0455,-14.989 4.032,-9.414 6.047,-14.589 6.047,-15.527 l 5.438,0 c 0,0.922 1.922,6.024 5.765,15.305 3.845,9.281 5.767,14.351 5.767,15.211 z M 27.16,31.953 C 23.488,22.781 21.652,17.906 21.652,17.328 l -0.258,0 c 0,0.485 -1.899,5.36 -5.694,14.625 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 59.926,37.602 -0.492,3.679 -4.055,0 c 0,2.907 0.09,6.688 0.282,11.344 l -4.008,0 c 0.125,-4.031 0.187,-7.812 0.187,-11.344 l -13.265,0 -0.494,-2.953 c 0,-0.406 2.119,-3.476 6.352,-9.211 4.235,-5.734 6.345,-8.718 6.329,-8.953 l 4.899,0 c -0.189,3.531 -0.282,9.43 -0.282,17.696 1.422,0 2.938,-0.09 4.547,-0.258 z m -7.851,-14.11 -0.188,0 c 0,0.422 -1.68,2.852 -5.04,7.289 -3.358,4.438 -5.039,6.782 -5.039,7.032 l 0,0.187 c 2.75,0 6.086,-0.05 10.008,-0.164 0.03,-4.844 0.117,-9.625 0.259,-14.344 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteAster4"];
  
  NS.EGpulsanteA5 = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 36.137,44.891 -4.945,0 c 0,-1.047 -0.985,-4.336 -2.954,-9.867 l -13.524,0 c -1.937,5.453 -2.906,8.742 -2.906,9.867 l -4.7335,0 c 0,-0.578 2.015,-5.574 6.0455,-14.989 4.032,-9.414 6.047,-14.589 6.047,-15.527 l 5.438,0 c 0,0.922 1.922,6.024 5.765,15.305 3.845,9.281 5.767,14.351 5.767,15.211 z M 27.16,31.953 C 23.488,22.781 21.652,17.906 21.652,17.328 l -0.258,0 c 0,0.485 -1.899,5.36 -5.694,14.625 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 60.4,46.5 q 0,2.6 -0.9,4.6 -0.9,2 -2.5,3.4 -1.5,1.3 -3.7,2.1 -2.2,0.7 -4.9,0.7 -1.5,0 -2.8,-0.3 -1.4,-0.2 -2.4,-0.4 -1.1,-0.4 -1.7,-0.7 -0.7,-0.3 -0.9,-0.4 -0.2,-0.2 -0.2,-0.4 -0.1,-0.1 -0.2,-0.3 0,-0.2 -0.1,-0.6 0,-0.3 0,-0.7 0,-0.4 0,-0.8 0.1,-0.3 0.2,-0.5 0.1,-0.2 0.2,-0.3 0.2,-0.1 0.3,-0.1 0.3,0 0.8,0.3 0.5,0.3 1.4,0.7 0.9,0.3 2.2,0.6 1.3,0.3 3.1,0.3 1.6,0 3,-0.3 1.4,-0.4 2.4,-1.3 1,-0.8 1.6,-2.1 0.6,-1.3 0.6,-3.1 0,-1.6 -0.5,-2.7 -0.5,-1.2 -1.5,-2 -1,-0.8 -2.6,-1.2 -1.5,-0.3 -3.6,-0.3 -1.5,0 -2.6,0.1 -1.1,0.1 -2.1,0.1 -0.7,0 -1,-0.3 -0.3,-0.3 -0.3,-1.2 v -13.1 q 0,-0.8 0.4,-1.2 0.4,-0.4 1.1,-0.4 h 14.2 q 0.2,0 0.4,0.1 0.2,0.1 0.3,0.3 0.2,0.3 0.2,0.6 0.1,0.4 0.1,0.8 0,0.9 -0.3,1.4 -0.2,0.5 -0.7,0.5 h -11.9 v 9 q 0.8,-0.1 1.7,-0.1 0.9,0 2.1,0 2.8,0 4.8,0.6 2.1,0.7 3.5,1.9 1.4,1.2 2.1,2.9 0.7,1.7 0.7,3.8 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteAster5"];
  
  NS.EGpulsanteA6 = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 36.137,44.891 -4.945,0 c 0,-1.047 -0.985,-4.336 -2.954,-9.867 l -13.524,0 c -1.937,5.453 -2.906,8.742 -2.906,9.867 l -4.7335,0 c 0,-0.578 2.015,-5.574 6.0455,-14.989 4.032,-9.414 6.047,-14.589 6.047,-15.527 l 5.438,0 c 0,0.922 1.922,6.024 5.765,15.305 3.845,9.281 5.767,14.351 5.767,15.211 z M 27.16,31.953 C 23.488,22.781 21.652,17.906 21.652,17.328 l -0.258,0 c 0,0.485 -1.899,5.36 -5.694,14.625 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 60.7,51.6 c -0.9,1.6 -1.7,3.4 -3.3,4.4 -3.5,2.3 -7.9,3.1 -11.7,1.6 -1.6,-0.6 -3.2,-1.6 -3.8,-3.2 -1.1,-2.9 -2,-6.9 -2.2,-9.6 -0.3,-3.9 0.3,-6.9 1,-10 0.6,-2.5 2.1,-5.1 4.1,-6.8 2.6,-2.2 6.5,-3 9.9,-2.5 1.5,0.2 3,0.6 4.3,1.5 0.7,0.5 0.6,0.8 0.7,1.5 0.1,0.8 -0.2,1.4 -1.1,1.3 -1.5,-0.2 -3,-0.9 -4.5,-1 -2,-0.1 -4.2,-0.1 -5.7,1.2 -1.8,1.6 -3.7,3.7 -3.7,6.1 0,1.4 0,2.8 0,4.2 0,1.3 2.1,-1 3.1,-1.4 3,-1.1 6.4,-1 9.3,0.6 1.4,0.8 2.4,2.1 3.2,3.5 0.7,1.2 0.6,8.3 0.4,8.6 z m -4,-6.3 c -0.8,-1.3 -1.5,-3 -3.2,-3.4 -1.8,-0.5 -3.8,-0.8 -5.4,0 -1.3,0.6 -3.5,0.6 -3.4,2.6 0.1,2.1 -0.3,4.3 0.3,6.5 0.5,2 2.5,3.8 4.8,3.9 1.7,0.1 3.6,-0.4 4.7,-1.8 1.6,-2.1 3.3,-6 2.2,-7.8 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteAster6"];
    
  NS.EGpulsaceA3 = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 26.6,45.9 v -2.7 q -3.1,1 -3.5,1.1 1.3,0.6 2.2,1 z m 6,6.9 -1.3,-0.7 -8.6,-4.6 -1,-0.5 q -0.4,-0.2 -1.2,-0.6 0,-1.5 0,-2.3 0,-1.2 0,-2.3 l 3.7,-1.3 7.1,-2.6 1.3,-0.5 q 0,1.5 0,1.8 0,0.8 0,2.2 -1.5,0.4 -3.4,1.2 v 4.4 q 1.5,0.8 3.4,1.6 0,1.7 0,2 0,0.7 0,2.2 z m -2.9,-26.8 q 0.5,0.1 1.4,0.2 0.9,0.2 1.5,0.3 0.2,1.8 0.2,3.3 0,1.5 -0.3,2.7 -0.4,1.2 -1.2,2.3 -0.8,1 -1.9,1.4 -1.1,0.5 -2.5,0.5 -1.6,0 -2.9,-0.6 -1.3,-0.6 -2.1,-1.7 -0.9,-1.2 -1.2,-2.5 -0.4,-1.3 -0.4,-2.7 0,-1.4 0.3,-3.3 h 0.8 q 0.5,0 1,-0.1 h 1 q -0.2,1 -0.3,1.7 -0.1,0.6 -0.1,1.1 0,1.2 0.5,2.2 0.5,1 1.4,1.5 0.9,0.5 2,0.5 1,0 1.7,-0.4 0.8,-0.5 1.2,-1.2 0.3,-0.8 0.3,-2 0,-0.6 0,-1.4 -0.2,-0.7 -0.4,-1.8 z m 2.9,-1.7 q -2.3,-0.2 -3.8,-0.3 -1.6,-0.1 -4.1,-0.2 -2.6,-0.1 -3.4,-0.1 h -0.8 q 0,-2.1 0,-5.1 0,-2.7 0,-4.8 h 0.3 q 0.1,0 0.8,0.1 h 0.9 q 0.4,0.1 0.7,0.1 -0.1,1.7 -0.1,2.8 0,1.3 0,1.7 0,0.5 0,1.4 l 2.1,0.1 q 0,-1 0,-2.4 0,-0.5 -0.1,-2.6 1.2,0.1 2.7,0.1 0,1.6 0,2.4 0,1.2 0.1,2.7 l 2.1,0.1 v -1 q 0,-0.4 0,-1.9 v -1.8 q 0,-0.4 -0.1,-1.3 1.3,0.1 2.7,0.1 0,2.2 0,4.8 v 3.9 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 58.438,40.578 c 0,3.172 -1.582,6.027 -4.747,8.566 -3.164,2.539 -7.722,3.957 -13.675,4.254 l -0.68,-2.883 c 4.734,-0.312 8.43,-1.258 11.086,-2.836 2.656,-1.578 3.984,-3.672 3.984,-6.281 0,-2.422 -0.992,-4.129 -2.976,-5.121 -1.985,-0.992 -4.875,-1.488 -8.672,-1.488 L 43.227,32 c 3.015,0 5.492,-0.461 7.429,-1.383 1.938,-0.922 2.907,-2.188 2.907,-3.797 0,-1.516 -0.61,-2.594 -1.829,-3.235 -1.218,-0.64 -3.109,-0.96 -5.671,-0.96 -1.922,0 -3.602,0.164 -5.039,0.492 l 0.281,-3.305 c 1.437,-0.422 3.695,-0.633 6.773,-0.633 2.844,0 5.035,0.606 6.574,1.817 1.539,1.211 2.309,2.652 2.309,4.324 0,3.437 -1.805,5.758 -5.414,6.961 l 0,0.234 c 1.984,0.375 3.629,1.281 4.934,2.719 1.304,1.437 1.957,3.219 1.957,5.344 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteAce3"];
      
  NS.EGpulsaceA4 = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 26.6,45.9 v -2.7 q -3.1,1 -3.5,1.1 1.3,0.6 2.2,1 z m 6,6.9 -1.3,-0.7 -8.6,-4.6 -1,-0.5 q -0.4,-0.2 -1.2,-0.6 0,-1.5 0,-2.3 0,-1.2 0,-2.3 l 3.7,-1.3 7.1,-2.6 1.3,-0.5 q 0,1.5 0,1.8 0,0.8 0,2.2 -1.5,0.4 -3.4,1.2 v 4.4 q 1.5,0.8 3.4,1.6 0,1.7 0,2 0,0.7 0,2.2 z m -2.9,-26.8 q 0.5,0.1 1.4,0.2 0.9,0.2 1.5,0.3 0.2,1.8 0.2,3.3 0,1.5 -0.3,2.7 -0.4,1.2 -1.2,2.3 -0.8,1 -1.9,1.4 -1.1,0.5 -2.5,0.5 -1.6,0 -2.9,-0.6 -1.3,-0.6 -2.1,-1.7 -0.9,-1.2 -1.2,-2.5 -0.4,-1.3 -0.4,-2.7 0,-1.4 0.3,-3.3 h 0.8 q 0.5,0 1,-0.1 h 1 q -0.2,1 -0.3,1.7 -0.1,0.6 -0.1,1.1 0,1.2 0.5,2.2 0.5,1 1.4,1.5 0.9,0.5 2,0.5 1,0 1.7,-0.4 0.8,-0.5 1.2,-1.2 0.3,-0.8 0.3,-2 0,-0.6 0,-1.4 -0.2,-0.7 -0.4,-1.8 z m 2.9,-1.7 q -2.3,-0.2 -3.8,-0.3 -1.6,-0.1 -4.1,-0.2 -2.6,-0.1 -3.4,-0.1 h -0.8 q 0,-2.1 0,-5.1 0,-2.7 0,-4.8 h 0.3 q 0.1,0 0.8,0.1 h 0.9 q 0.4,0.1 0.7,0.1 -0.1,1.7 -0.1,2.8 0,1.3 0,1.7 0,0.5 0,1.4 l 2.1,0.1 q 0,-1 0,-2.4 0,-0.5 -0.1,-2.6 1.2,0.1 2.7,0.1 0,1.6 0,2.4 0,1.2 0.1,2.7 l 2.1,0.1 v -1 q 0,-0.4 0,-1.9 v -1.8 q 0,-0.4 -0.1,-1.3 1.3,0.1 2.7,0.1 0,2.2 0,4.8 v 3.9 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 59.926,37.602 -0.492,3.679 -4.055,0 c 0,2.907 0.09,6.688 0.282,11.344 l -4.008,0 c 0.125,-4.031 0.187,-7.812 0.187,-11.344 l -13.265,0 -0.494,-2.953 c 0,-0.406 2.119,-3.476 6.352,-9.211 4.235,-5.734 6.345,-8.718 6.329,-8.953 l 4.899,0 c -0.189,3.531 -0.282,9.43 -0.282,17.696 1.422,0 2.938,-0.09 4.547,-0.258 z m -7.851,-14.11 -0.188,0 c 0,0.422 -1.68,2.852 -5.04,7.289 -3.358,4.438 -5.039,6.782 -5.039,7.032 l 0,0.187 c 2.75,0 6.086,-0.05 10.008,-0.164 0.03,-4.844 0.117,-9.625 0.259,-14.344 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteAce4"];

  NS.EGpulsanteHook = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "m 30.278,48.301 -4.454,0 c 0.157,-5.406 0.235,-10.25 0.235,-14.532 l -14.039,0 c 0,3.469 0.08,8.313 0.234,14.532 l -4.453,0 C 8.02,42.598 8.129,37.254 8.129,32.269 8.129,27.051 8.02,22.223 7.801,17.785 l 4.453,0 c -0.187,4.469 -0.281,8.813 -0.281,13.031 l 14.133,0 c 0,-3.39 -0.09,-7.734 -0.282,-13.031 l 4.454,0 c -0.235,4.344 -0.352,9.172 -0.352,14.484 0,5.829 0.117,11.172 0.352,16.032 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 59.199,36.488 c 0,4 -1.148,7.121 -3.445,9.364 -2.297,2.242 -5,3.363 -8.109,3.363 -2.907,0 -5.403,-0.992 -7.489,-2.977 -2.085,-1.984 -3.128,-4.781 -3.128,-8.39 0,-4.032 1.152,-7.18 3.457,-9.446 2.304,-2.265 5.011,-3.398 8.121,-3.398 2.906,0 5.398,1.004 7.476,3.012 2.078,2.007 3.117,4.832 3.117,8.472 z m -4.054,0.821 c 0,-2.438 -0.614,-4.606 -1.84,-6.504 -1.227,-1.899 -2.973,-2.848 -5.238,-2.848 -2.25,0 -3.981,0.898 -5.192,2.695 -1.211,1.797 -1.816,3.883 -1.816,6.258 0,2.453 0.613,4.625 1.84,6.516 1.226,1.89 2.98,2.836 5.261,2.836 2.25,0 3.977,-0.903 5.18,-2.707 1.203,-1.805 1.805,-3.887 1.805,-6.246 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteHook"];

  NS.EGpulsanteFlow = [
    [
      [null, "width", 64],
      [null, "height", 64],
      [null, "x", "1.5"],
      [null, "y", "1.5"],
      [null, "rx", "3"],
      [null, "ry", "3"],
      [null, "fill", "#d4d4d4"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "rect"],
    [
      [null, "d", "M 30.488,18.242 30.3,21.734 c -4.156,-0.187 -8.867,-0.281 -14.132,-0.281 0.187,2.594 0.281,6.172 0.281,10.734 3.672,0 7.242,-0.06 10.711,-0.187 l 0,3.398 c -3.344,-0.125 -6.914,-0.187 -10.711,-0.187 0,6.109 0.09,10.625 0.258,13.547 l -4.265,0 c 0.218,-4.844 0.327,-10.188 0.327,-16.032 0,-5.499 -0.109,-10.328 -0.327,-14.484 z"],
      [null, "fill", "#fff"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#d5d5d5"],
      [null, "stroke-width", "1"],
        "path"],
    [
      [null, "d", "m 54.558,45.312 -0.14,3.446 -18.446,0 c 0.188,-3.86 0.281,-9.203 0.282,-16.032 0,-5.874 -0.09,-10.703 -0.282,-14.484 l 4.36,0 c -0.188,3.156 -0.282,7.985 -0.282,14.484 0,5.344 -0.09,9.626 -0.257,12.844 4.687,0 9.609,-0.09 14.765,-0.258 z"],
      [null, "fill", "#d4d4d4"],
      [null, "fill-rule", "evenodd"],
      [null, "stroke", "#fff"],
      [null, "stroke-width", "2"],
        "path"],
      "pulsanteFlow"];



  /**
  Raccolta di funzioni da inserire in window.onload
  */
  NS.onloadSim = function () {
    NS.clog(NS);
    NS.initTree(); //albero SVG del simulatore
    NS.initElementi();

  };

  NS.clog = function (text) {
    /*jshint devel:false */
    //if ((window.console !== undefined)) {
      console.log(text);
    //}
  };

  NS.initTree = function () {
    NS.simDiv = document.getElementById(NS.simDiv);
    NS.SVGEl = document.createElementNS(NS.svgNS, "svg");
    NS.SVGEl.onmousedown = NS.selezionaSVG;
    NS.SVGEl.onmouseup = NS.deselezionaSVG;
    NS.SVGEl.onmousemove = NS.panSVG;
    NS.setArrayAttr(NS.SVGEl, NS.SVGElAttr);
    NS.simDiv.appendChild(NS.SVGEl);
    NS.vp = document.createElementNS(NS.svgNS, "g");
    NS.defs = document.createElementNS(NS.svgNS, "defs");
    NS.setArrayAttr(NS.vp, NS.vpAttr);
    NS.SVGEl.appendChild(NS.vp);
    NS.SVGEl.appendChild(NS.defs);
    /**
    NS.ma è una matrice identica di riferimento per le trasformazioni.
    si potrebbe pensare di proteggerla
    */
    NS.ma = NS.SVGEl.createSVGMatrix() || NS.SVGEl.getScreenCTM();
    //DWCS - DiscWorld Coordinate System
    if (NS.isometrica) {
    NS.cinquantacinque = 90 - Math.atan(Math.SQRT2)*180/Math.PI;
    NS.scaMatrix = NS.SVGEl.createSVGMatrix();
    NS.scaMatrix.a = NS.scala;
    NS.scaMatrix.d = NS.scala*2;
    //);.scaleNonUniform(1,2/3) .rotate(NS.cinquantacinque)
      if (NS.destro === -1) {
      NS.setCTM(NS.vp, NS.ma.scaleNonUniform(1,2/3).translate(NS.SVGelOffX, NS.SVGelOffY).scale(NS.scala).rotate(NS.cinquantacinque).flipX());
      } else {
      NS.setCTM(NS.vp, NS.ma.scaleNonUniform(1,2/3).translate(NS.SVGelOffX, NS.SVGelOffY).scale(NS.scala).rotate(NS.cinquantacinque));
      }
    } else {
      if (NS.destro === -1) {
      NS.setCTM(NS.vp, NS.ma.translate(NS.SVGelOffX, NS.SVGelOffY).scale(NS.scala).flipX());
      } else {
      NS.setCTM(NS.vp, NS.ma.translate(NS.SVGelOffX, NS.SVGelOffY).scale(NS.scala));
      }
    }
    
  };

  /**
  Crea un nuovo motore. Da estendere con metodi specifici a seconda della geometria del modello
  @constructor tipo generico di motore,staffe e punti di controllo
  */
  NS.Motore = function () {
    /**
    Designazione del Modello
    */
    this.mod = arguments[0];
    this.attivoID = arguments[1];
    this.cachedPunti = []; //quando viene attivato/disattivato il motore prendo dalla/metto in cache le posizioni dei punti di controllo B e C
    this.cachedStaAtt = 0;
    this.g = document.createElementNS(NS.svgNS, "g");
    this.g.setAttributeNS(null, "id", this.mod);
    this.staAtt = 0;
    this.staTest = 0;
    this.staPrec = 0;
    this.fuoriPilastro = false;
    this.nonUsabile = false;
    this.valoreOttimizzazione = 0;

    this.aggiornaStep = function () {
      if (NS.actstep === -1) {
        if (NS.motAtt === this.attivoID) {
          this.g.setAttributeNS(null, "visibility", "visible");
        } else {
          this.g.setAttributeNS(null, "visibility", "hidden");
        }
      } else {
        this.g.setAttributeNS(null, "visibility", "hidden");
      }
    };
    
    this.testOk = function () {
      this.staPrec = this.staAtt;
      this.staAtt = this.staTest;
    };

    NS.vp.appendChild(this.g);

    this.getMod = function () {
      return this.mod;
    };
    
    this.testNonUsabile = function () {
      return this.nonUsabile;//placeholder
    };

    this.ottimizza = function () {
      //NS.clog("Non sto ottimizzando " + this.mod);
    };

    if (this.mod === "myaster3") {
      this.attivoID = 0;
      this.corsa = 295;
      this.inoxA = NS.creaElementi(NS.EGinox3, this.g);
      this.inoxA.setAttributeNS(null, "stroke", "#dadada");
      this.inoxA.setAttribute("id", this.inoxA.getAttribute("id") + "A");
      this.inoxA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.inoxA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA = NS.creaElementi(NS.EGridutt3, this.g);
      this.riduttA.setAttributeNS(null, "stroke", "#dadada");
      this.riduttA.setAttribute("id", this.riduttA.getAttribute("id") + "A");
      this.riduttA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[2].setAttributeNS(null, "fill", "none");
      this.inox = NS.creaElementi(NS.EGinox3, this.g);
      this.ridutt = NS.creaElementi(NS.EGridutt3, this.g);
      this.foroOtt = 0;
      this.cyAlimite = -150; //150 in questo caso non c'entra con la corsa
      this.ipo2 = 851929;
      this.ipo = 923;
    }

    if (this.mod === "myaster4") {
      this.attivoID = 1;
      this.corsa = 395;
      this.inoxA = NS.creaElementi(NS.EGinox4, this.g);
      this.inoxA.setAttributeNS(null, "stroke", "#dadada");
      this.inoxA.setAttribute("id", this.inoxA.getAttribute("id") + "A");
      this.inoxA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.inoxA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA = NS.creaElementi(NS.EGridutt4, this.g);
      this.riduttA.setAttributeNS(null, "stroke", "#dadada");
      this.riduttA.setAttribute("id", this.riduttA.getAttribute("id") + "A");
      this.riduttA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[2].setAttributeNS(null, "fill", "none");
      this.inox = NS.creaElementi(NS.EGinox4, this.g);
      this.ridutt = NS.creaElementi(NS.EGridutt4, this.g);
      this.cyAlimite = -275;
      this.ipo2 = 1261129;
      this.ipo = 1123;
    }
    
    if (this.mod === "myaster5") {
      this.attivoID = 2;
      this.corsa = 495;
      this.inoxA = NS.creaElementi(NS.EGinox5, this.g);
      this.inoxA.setAttributeNS(null, "stroke", "#dadada");
      this.inoxA.setAttribute("id", this.inoxA.getAttribute("id") + "A");
      this.inoxA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.inoxA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA = NS.creaElementi(NS.EGridutt5, this.g);
      this.riduttA.setAttributeNS(null, "stroke", "#dadada");
      this.riduttA.setAttribute("id", this.riduttA.getAttribute("id") + "A");
      this.riduttA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[2].setAttributeNS(null, "fill", "none");
      this.inox = NS.creaElementi(NS.EGinox5, this.g);
      this.ridutt = NS.creaElementi(NS.EGridutt5, this.g);
      this.cyAlimite = -300;
      this.ipo2 = 1750329;
      this.ipo = 1323;
    }
    
    if (this.mod === "myaster6") {
      this.attivoID = 3;
      this.corsa = 595;
      this.inoxA = NS.creaElementi(NS.EGinox6, this.g);
      this.inoxA.setAttributeNS(null, "stroke", "#dadada");
      this.inoxA.setAttribute("id", this.inoxA.getAttribute("id") + "A");
      this.inoxA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.inoxA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA = NS.creaElementi(NS.EGridutt6, this.g);
      this.riduttA.setAttributeNS(null, "stroke", "#dadada");
      this.riduttA.setAttribute("id", this.riduttA.getAttribute("id") + "A");
      this.riduttA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[2].setAttributeNS(null, "fill", "none");
      this.inox = NS.creaElementi(NS.EGinox6, this.g);
      this.ridutt = NS.creaElementi(NS.EGridutt6, this.g);
      this.cyAlimite = -350;
      this.ipo2 = 2319529;
      this.ipo = 1523;
    }

    if (this.mod === "myaster3" || this.mod === "myaster4" || this.mod === "myaster5" || this.mod === "myaster6") {
      this.aggiornaStep = NS.aggiornaStepPistoni;
      this.move = NS.movePistoni;
      this.sceltaForo = NS.sceltaForoPistoni;
      this.setCTM = NS.setCTMpistoni;
      this.ottimizza = NS.ottimizzaPistoni;
      this.testNonUsabile = NS.nonUsabilePistoni;
      this.prova = NS.provaPistone;
      this.nonMovibile = NS.entroLimitiPilastro;
      this.ptIdeale = {};
    }

    if (this.mod === "myhook") {
      this.attivoID = 4;
      this.cyPassLimite = -300;
      this.cyPilLimite = -200;
      this.angoloLimiteBCurvoAnta = 0.785398; //45°
      this.valoreAngLimiteBCurvo;
      this.valoreAngLimiteBDritto;
      this.drittoA = NS.creaElementi(NS.EGbDrittoHook, this.g);
      this.drittoA.setAttributeNS(null, "stroke", "#dadada");
      this.drittoA.setAttribute("id", this.drittoA.getAttribute("id") + "A");
      this.drittoA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.curvoA = NS.creaElementi(NS.EGbCurvoHook, this.g);
      this.curvoA.setAttributeNS(null, "stroke", "#dadada");
      this.curvoA.setAttribute("id", this.curvoA.getAttribute("id") + "A");
      this.curvoA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.dritto = NS.creaElementi(NS.EGbDrittoHook, this.g);
      this.curvo = NS.creaElementi(NS.EGbCurvoHook, this.g);
      this.sulPilastro = false;
      this.nelPassaggio = false; // motore può essere montato nel passo carraio accanto al cancello
      this.attualmenteSulPilastro = true;
      this.aggiornaStep = NS.aggiornaStepBraccio;
      this.move = NS.moveBraccio;
      this.setCTM = NS.setCTMbraccio;
      this.testNonUsabile = NS.nonUsabileBraccio;
      this.prova = NS.provaBraccio;
      this.ipo2 = 490000;
      this.ipo = 700;
      this.bBox = [
      [{
      x: +60,
      y: +100
      },{
      x: +60,
      y: -77
      }],[{
      x: +110,
      y: +175
      },{
      x: +110,
      y: -60
      }]];
      this.bContro = this.bBox[0];
      
      this.calcolaAngoloLimiteBCurvo = function (B,Cx) {
        var curvoX, curvoY, distanzaAcurvo, intersezioni, angoloAgiunzioneAperto, puntoCx, puntoCy, angApertura;
        this.valoreAngLimiteBCurvo = 3;
        this.valoreAngLimiteBDritto = 3;
        curvoX = Cx + 375*Math.cos(this.angoloLimiteBCurvoAnta);
        curvoY = NS.C.y + 375*Math.sin(this.angoloLimiteBCurvoAnta);
        angApertura = NS.angoloAsseX(NS.A.x, NS.A.y, curvoX, curvoY);
        distanzaAcurvo = NS.distanza(NS.A.x,NS.A.y,curvoX,curvoY);
        intersezioni = NS.interscirco(NS.A.x, NS.A.y, distanzaAcurvo, B.x, B.y, 399);
        
        if (NS.muro) {
        //determina angolo massimo per braccio dritto contro muro
        var nuovaIntersX = NS.D.x + 25;
        var nuovaIntersY = Math.sin(Math.acos((B.x-nuovaIntersX)/399))*399 + B.y;
        // ricava la posizione di C ruotata
        var interC = NS.interscirco(nuovaIntersX, nuovaIntersY, 375, NS.A.x, NS.A.y, NS.ac);
        if (interC[1] > interC[0]) {
          puntoCx = interC[1];
          puntoCy = interC[3];
        } else {
          puntoCx = interC[0];
          puntoCy = interC[2];
        }
        if (NS.test) {
        NS.testPt1.setAttributeNS(null,"cx",nuovaIntersX);//dea
        NS.testPt1.setAttributeNS(null,"cy",nuovaIntersY);
        NS.testPt2.setAttributeNS(null,"cx",puntoCx);//dea
        NS.testPt2.setAttributeNS(null,"cy",puntoCy);
        }
        // NS.angACasseX
        this.valoreAngLimiteBDritto = Math.atan2(puntoCy - NS.A.y, puntoCx - NS.A.x) - NS.angACasseX;
        }
        
        if (intersezioni === false) {
        return;
        }
        angoloAgiunzioneAperto = NS.angoloAsseX(NS.A.x, NS.A.y, intersezioni[1], intersezioni[3]);
        this.valoreAngLimiteBCurvo = angoloAgiunzioneAperto - angApertura + Math.PI;
      };

  
      this.ottimizza = function () {
    /* 
    / Prima di tutto provo due vie diverse, sul pilastro e nel passaggio.
    / ci sono molti modi di affrontare questa scelta, per ora la logica è 
    / che se riesco ad usare il pilastro, lo uso e return, altrimenti, e se posso, 
    / ricado sul passaggio. Solitamente è preferibile non avere il motore nel passaggio.
    */
    if (this.sulPilastro) {
      //NS.clog("ottimizzaSulPilastro");
      this.bContro = this.bBox[0];
      this.attualmenteSulPilastro = true;
      if (this.ottimizzaSulPilastro()) {return true;}
    }
    if (this.nelPassaggio) {
      this.bContro = this.bBox[1];
      this.attualmenteSulPilastro = false;
      return this.ottimizzaNelPassaggio();
      
    }
    
    return false;
  };    
        /**
         ok, ora che sappiamo di stare lavorando sul pilastro, si va.
         sul pilastro la logica si basa sulla valutazione della lunghezza anta,
         al fine di assegnare all'anta una velocità adeguata alla sua lunghezza.
         come regola d'oro diciamo ancora che la velocità tangenziale all'estremo dell'anta
         dovrebbe essere < 11-12 m/min
         calcolo la corsa del primo braccio in una condizione iniziale (provaBX, provaBY),
         calcolo altresì l'angolo di apertura ottenuto, li processo con
         una costante adeguata, e confronto il risultato con la velocità, se è inferiore posso
         allontanare il motore, altrimenti lo avvicino, fino a quando non incontro 
         un limite fisico o trovo la velocità desiderata
        */      
      this.ottimizzaSulPilastro = function () {
        var nuovaCoordinata, minimaX, better, betterDiffVelocita = 10000;
        this.staTest = 4;
        better = -58-NS.marginiPilastro;
        //NS.sta.fori[4] è 143,77, il "foro" (la posizione) sul pilastro. L'altro è il 5, sul lato dell'anta.
        nuovaCoordinata = {
        x: better,
        y: NS.sta.fori[4][1]
        };
        minimaX = NS.D.x + 143 + NS.marginiPilastro;
        while (nuovaCoordinata.x > minimaX) {
          nuovaCoordinata.x--;
          //NS.clog("nuovaCoordinata.x " + nuovaCoordinata.x);
          //NS.clog("NS.velocitaAntaBraccio " + NS.velocitaAntaBraccio);
          if (this.prova(nuovaCoordinata)) {
            var diffVelocita = Math.abs(NS.velocitaAntaBraccio - 11);
            if (diffVelocita < betterDiffVelocita) {
              betterDiffVelocita = diffVelocita;
              better = nuovaCoordinata.x;
            }
          }
        }
        nuovaCoordinata.x = better;
        NS.clog(nuovaCoordinata.x + " " + nuovaCoordinata.y);
        if (this.prova(nuovaCoordinata)) {
          //NS.clog("La prova ad una x di " + nuovaCoordinata.x + " ha funzionato.");
          this.setCTM();
          this.nonUsabile = false;
          return true;
        }
        NS.clog("La prova ad una x di " + nuovaCoordinata.x + " NON ha funzionato.");
        this.nonUsabile = true;
        return false;
      };
      
      
      this.ottimizzaNelPassaggio = function () {
      var nuovaCoordinata, optimus, better, minimaY, angoloPrecedente = 0;
        this.staTest = 5; //provo questo foro, ma senza impegno.
        nuovaCoordinata = {
        x: NS.sta.fori[5][0],
        y: NS.E.y + 66
        };
        minimaY = -143-NS.marginiPilastro;
        optimus = false;
        while (!optimus && (nuovaCoordinata.y < -143-NS.marginiPilastro)) {
          nuovaCoordinata.y++;
        if (this.prova(nuovaCoordinata)) {
            var diffAngoli = angoloPrecedente - NS.angFermo;
            angoloPrecedente = NS.angFermo;
            if (diffAngoli < 0) {
              // aumento la y fino a quando aumenta l'angolo.
              better = diffAngoli;
            } else {
              optimus = true;
            }
        } else {
          nuovaCoordinata.y--;
          optimus = true;
        }
       }

       if (this.prova(nuovaCoordinata)) {
       //NS.clog("ottimizzaNelPassaggio");
          this.setCTM();
          this.nonUsabile = false;
          return true;
        }
        this.nonUsabile = true;
        return false;
      };
      
      
      this.spostaCorta = function (newX) {
        var cx = NS.C.x, bc = NS.distanza(newX, NS.C.y, NS.B.x, NS.B.y), aSpigolo = NS.distanza(NS.A.x, NS.A.y,NS.B.x+this.bContro[0].x, NS.B.y+this.bContro[0].y); // Math.sqrt((dy * dy) + (dx * dx));
        //NS.clog("bc " + bc + ". Sposto C nella nuova X " + newX);
        if ((bc < this.ipo) && (newX > 0)) {
          if (this.prova(NS.B, newX) && (aSpigolo < (NS.ac-30))) {
            this.setCTM();
            return true;
          } else {
          NS.clog("Questa prova in spostaCorta non ha successo");
          NS.C.setX(cx);
          NS.aggiornaApertura();
          }
        }
        return false;
      };
    }

    if (this.mod === "myflow") {
      this.attivoID = 5;
      this.corsa = 0;
      this.staAtt = 6;
      this.riduttA = NS.creaElementi(NS.EGriduttoreRuota, NS.antaA);
      this.riduttA.setAttributeNS(null, "stroke", "#dadada");
      this.riduttA.setAttribute("id", this.riduttA.getAttribute("id") + "A");
      this.riduttA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[2].setAttributeNS(null, "fill", "none");
      this.riduttA.setAttributeNS(null, "visibility", "hidden");
      this.ridutt = NS.creaElementi(NS.EGriduttoreRuota, this.g);
      this.ottimizza = NS.ottimizzaRuota;
      this.setCTM = NS.setCTMruota;
    }
    
    if (this.mod === "ace3") {
      this.attivoID = 6;
      this.corsa = 295;
      this.inoxA = NS.creaElementi(NS.EGinoxAce3, this.g);
      this.inoxA.setAttributeNS(null, "stroke", "#dadada");
      this.inoxA.setAttribute("id", this.inoxA.getAttribute("id") + "A");
      this.inoxA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.inoxA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA = NS.creaElementi(NS.EGridace3, this.g);
      this.riduttA.setAttributeNS(null, "stroke", "#dadada");
      this.riduttA.setAttribute("id", this.riduttA.getAttribute("id") + "A");
      this.riduttA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[2].setAttributeNS(null, "fill", "none");
      this.inox = NS.creaElementi(NS.EGinoxAce3, this.g);
      this.ridutt = NS.creaElementi(NS.EGridace3, this.g);
      this.foroOtt = 0;
      this.cyAlimite = -150; //150 in questo caso non c'entra con la corsa
      this.ipo2 = 1162084;
      this.ipo = 1078;
    }
    
    if (this.mod === "ace4") {
      this.attivoID = 7;
      this.corsa = 395;
      this.inoxA = NS.creaElementi(NS.EGinoxAce4, this.g);
      this.inoxA.setAttributeNS(null, "stroke", "#dadada");
      this.inoxA.setAttribute("id", this.inoxA.getAttribute("id") + "A");
      this.inoxA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.inoxA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA = NS.creaElementi(NS.EGridace4, this.g);
      this.riduttA.setAttributeNS(null, "stroke", "#dadada");
      this.riduttA.setAttribute("id", this.riduttA.getAttribute("id") + "A");
      this.riduttA.childNodes[0].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[1].setAttributeNS(null, "fill", "none");
      this.riduttA.childNodes[2].setAttributeNS(null, "fill", "none");
      this.inox = NS.creaElementi(NS.EGinoxAce4, this.g);
      this.ridutt = NS.creaElementi(NS.EGridace4, this.g);
      this.foroOtt = 0;
      this.cyAlimite = -250; //250 in questo caso non c'entra con la corsa
      this.ipo2 = 1633284;
      this.ipo = 1278; // interasse cerniere motore esteso meno 20 mm di headroom
    }
    
    if (this.mod === "ace3" || this.mod === "ace4") {
      this.aggiornaStep = NS.aggiornaStepPistoni;
      this.move = NS.movePistoni;
      this.sceltaForo = NS.sceltaForoPistoni;
      this.setCTM = NS.setCTMpistoni;
      this.ottimizza = NS.ottimizzaPistoni;
      this.testNonUsabile = NS.nonUsabilePistoni;
      this.prova = NS.provaPistone;
      this.nonMovibile = NS.entroLimitiPilastro;
      this.ptIdeale = {};
    }

  };
  
  NS.ottimizzaRuota = function () {
    // non necessita funzioni ausiliarie, semplicemente determino la distanza 
    // da A in base alla lunghezza dell'anta 
    // il motore si colloca sul punto C
    var Cx = NS.E.x - 150;
    NS.angACasseX = NS.angoloAsseX(Cx, NS.C.y, NS.A.x, NS.A.y);
    
    // ricavo la velocità tangenziale in punta all'anta con questo cx.
    
    // determino l'angolo finale confrontando l'angolo voluto e quello massimo possibile.
    NS.angMcMax = Math.min(NS.angMaxPilastro, NS.getAngoloMaxControMuro()-0.1);
    if (NS.angVoluto > NS.angMcMax) {
      NS.angFermo = NS.angMcMax;
    } else {
      NS.angFermo = NS.angVoluto;
    }
    // stimo il tempo di apertura.
    NS.J.x = NS.inters[1];
    NS.J.y = NS.inters[3];
    NS.C.setX(Cx);
    this.setCTM();
    NS.aggiornaApertura();
    return true;
  };
  
  NS.setCTMruota = function () {
    NS.setCTM(this.ridutt, NS.ma.translate(NS.C.x, NS.C.y-46));
    NS.setCTM(this.riduttA, NS.ma.translate(NS.C.x - NS.A.x, NS.Ly));
    NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y).rotate(NS.angFermo * 57.2957795));
  };
  
  NS.moveBraccio = function (newX, dX, newY, dY) {
    var nuovaCoordinata;
    var compensazioneMuro = 0;
    if (NS.muro) {compensazioneMuro = 25;}
    //prima gestiamo l'eventuale salto sull'altra faccia del pilastro
    //se posso andare con il motore sul lato del pilastro
    if ((this.sulPilastro) && (newY > -50) && (newX < 0) && (!this.attualmenteSulPilastro)) {
      this.bContro = this.bBox[0];
      //vai sul lato del pilastro
      this.attualmenteSulPilastro = true;
      this.staTest = 3;
    }
    //NS.clog(NS.velocitaAntaBraccio);
    //se posso andare con il motore nel passaggio
    if ((this.nelPassaggio) && (newY < 0) && (newX > -50) && (this.attualmenteSulPilastro)) {
      //vai nel passaggio
      //NS.clog("prova nel passaggio");
      this.bContro = this.bBox[1];
      this.attualmenteSulPilastro = false;
      this.staTest = 4;
    }
    
    if (this.attualmenteSulPilastro) {
      if ((newX < NS.D.x+145+NS.marginiPilastro+compensazioneMuro) || (newX > -56-NS.marginiPilastro)) {return false;}
      nuovaCoordinata = {
        x: newX,
        y: NS.sta.fori[this.staTest][1]
      };
    } else {
      if ((newY < NS.E.y+50) || (newY > -140-NS.marginiPilastro)) {return false;}
      nuovaCoordinata = {
        x: NS.sta.fori[this.staTest][0],
        y: newY
      };
    }
    if (this.prova(nuovaCoordinata) && !(this.fuoriPilastro && !NS.permettiFuoriPilastro)) {
      this.setCTM();
      return true;
      }
      return false;
    
    
  };
  
  NS.setCTMbraccio = function () {
    var inters = NS.interscirco(NS.B.x, NS.B.y, 399, NS.C.x, NS.C.y, 375);
    /*if (NS.test) {
    NS.testPt1.setAttributeNS(null,"cx",inters[0]);//dea
    NS.testPt1.setAttributeNS(null,"cy",inters[2]);
    }*/
    var AngPistG = NS.angoloAsseX(inters[0], inters[2], NS.C.x, NS.C.y) * 57.2957795;
    NS.AngPistF = NS.angoloAsseX(inters[0], inters[2], NS.B.x, NS.B.y) * 57.2957795;
    
    var inters2 = NS.interscirco(NS.B.x, NS.B.y, 399, NS.ptCorsaX, NS.ptCorsaY, 375);
    
    NS.setCTM(this.curvo, NS.ma.translate(inters[0], inters[2]).rotate(AngPistG));
    NS.setCTM(this.dritto, NS.ma.translate(NS.B.x, NS.B.y).rotate(NS.AngPistF));
    
    AngPistG = NS.angoloAsseX(inters2[0], inters2[2], NS.ptCorsaX, NS.ptCorsaY) * 57.2957795;
    NS.setCTM(this.curvoA, NS.ma.translate(inters2[0], inters2[2]).rotate(AngPistG));
    AngPistG = NS.angACasseX+NS.angoloAsseX(inters2[0], inters2[2],NS.B.x, NS.B.y) * 57.2957795;
    
    if (AngPistG < 0) {
      AngPistG += 180;
    }
    NS.setCTM(this.drittoA, NS.ma.translate(NS.B.x, NS.B.y).rotate(AngPistG));
    NS.setCTM(NS.corta, NS.ma.translate(NS.C.x, NS.C.y - 46));
    NS.setCTM(NS.cortaA, NS.ma.translate(NS.C.x - NS.A.x, NS.Ly));
    NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y).rotate(NS.angFermo * 57.2957795));
    NS.sta.setCTM();
  };

  /**
    Pregiudizi sulla possibilità che un braccio articolato sia montato su un cancello.
    Nel caso del braccio articolato questa prima analisi serve soprattutto per
    prevedere dove si può montare il motore (lato cancello/lato interno).
    Viene anche usata con un argomento (newX) se si è durante il trascinamento della staffa
    per fermarla se va oltre i limiti.
  */
  NS.nonUsabileBraccio = function () {
        //se non ho spazio sul pilastro e nel passaggio non è utilizzabile
        if ((NS.D.x > -200) && (NS.E.y > this.cyPilLimite)) {
          this.nonUsabile = true;
          return true;
        }
        // Di qua in poi non è sempre installabile, ma prima di rispondere mi prendo nota di dove posso installarlo...
        //Se l'anta è più lontana di 300, si può mettere il motore solo nel passaggio.
        if (NS.E.y <= this.cyPassLimite) {
          this.nelPassaggio = true;
          this.sulPilastro = false;
        } else {
          this.nelPassaggio = (NS.E.y < this.cyPilLimite) ? true : false ;
          this.sulPilastro = (NS.D.x > -199) ? false : true ;
	}
        this.nonUsabile = false;
        return false;
      };
  /**
    cambia la visibilità del braccio articolato in base ad NS.actstep e NS.motAtt
  */
  
  NS.aggiornaStepBraccio = function () {
        if (NS.actstep === -1) {
          if (NS.motAtt === this.attivoID) {
            this.g.setAttributeNS(null, "visibility", "visible");
          } else {
            this.g.setAttributeNS(null, "visibility", "hidden");
          }
        } else {
          this.g.setAttributeNS(null, "visibility", "hidden");
        }
      };

  NS.aggiornaStepPistoni = function () {
    if (NS.actstep === -1) {
      if (NS.motAtt === this.attivoID) {
        this.g.setAttributeNS(null, "visibility", "visible");
        this.inoxA.setAttributeNS(null, "visibility", "visible");
        this.riduttA.setAttributeNS(null, "visibility", "visible");
      } else {
        this.g.setAttributeNS(null, "visibility", "hidden");
        this.inoxA.setAttributeNS(null, "visibility", "hidden");
        this.riduttA.setAttributeNS(null, "visibility", "hidden");
      }
    } else {
      this.g.setAttributeNS(null, "visibility", "hidden");
      this.inoxA.setAttributeNS(null, "visibility", "hidden");
      this.riduttA.setAttributeNS(null, "visibility", "hidden");
    }
  };
  
  NS.entroLimitiPilastro = function (punto) {
    this.fuoriPilastro = false;
    var fattoreMuro = 0;
    if (NS.muro) {fattoreMuro = 10;}
    if ((punto.x > -22-NS.marginiPilastro) || (punto.x < 68+fattoreMuro+NS.D.x+NS.marginiPilastro)) {
      this.fuoriPilastro = true;
    }
    if (!(this.fuoriPilastro && !NS.permettiFuoriPilastro)) {
      return false;
    }
    return true;
    };

  NS.movePistoni = function (newX, dX, newY, dY) {
    var nuovaCoordinata;
    //var absDY = Math.abs(dY), nuovaCoordinata;
    var absDY = Math.abs(dY);
    nuovaCoordinata = {
        x: newX,
        y: NS.B.y
      };
    if (this.nonMovibile(nuovaCoordinata)) {return false;}
    if ((NS.debounceForo < 0) && (absDY > 30)) {
      var signDY = Math.floor(absDY / dY);

      if (this.staAtt === 1 || this.staAtt === 2) {
        this.staTest = this.staAtt + signDY;
      } else if (this.staAtt === 0) { // primo  foro: permetti solo di andare al secondo...
        absDY = (this.staAtt + 1 + signDY) / 2;
        this.staTest = absDY;
      } else {  // quarto  foro: al terzo si, non andare al quinto (non esiste...)
        absDY = this.staAtt + (signDY - 1) / 2;
        this.staTest = absDY;
      }
      if ((this.staTest === 0) && (this.attivoID > 5)) { this.staTest = 1 } // l'ACE non può usare il primo foro
      nuovaCoordinata.y = NS.sta.fori[this.staTest][1];
      NS.debounceForo = 30;
    }
    NS.debounceForo--;
    
    if (this.prova(nuovaCoordinata)) {
      this.setCTM();
      return true;
    }

    return false;
  };

  // TODO: funzione obsoleta, non usata, verra eliminata alla prossima release.
  NS.sceltaForoPistoniOld = function () {
    if (!NS.permettiTaglioStaffa) {
      //this.ptIdeale.y = 140;
      return 3;
    }
    // la y del centro rotazione pistone andrebbe a una
    // distanza di corsa/2 rispetto alla cerniera A
    this.ptIdeale.y = this.corsa / 2 + NS.A.y;
    //NS.clog(this.ptIdeale.y);
    if (this.ptIdeale.y < 65) {
      //primo foro
      return 0;
    }
    if (this.ptIdeale.y > 125) {
      //quarto foro
      return 3;
    }
    if (this.ptIdeale.y < 95) {
      //secondo foro
      return 1;
    }
    //terzo foro 
    return 2;
  };

// versione ufficiale dal 2017, che privilegia 
// l'uso della staffa non tagliata (quarto foro) rispetto alla 
// proporzione A+B migliore, fino ad un limite di rapporto A/B 
// compreso tra 0,5 e 2.
// Non permette l'uso del foro da 50 mm in caso di ACE (motore 
  NS.sceltaForoPistoni = function () {
    if (!NS.permettiTaglioStaffa) {
      //this.ptIdeale.y = 140;
      return 3;
    }
    // la y del centro rotazione pistone andrebbe a corsa/2 rispetto alla cerniera A
    this.ptIdeale.y = this.corsa / 2 + NS.A.y;
    // stabiliamo un limite arbitrario, tale che
    // entrambe le quote debbano stare tra 
    // (corsa/NS.limiteTagliaMeno) e (corsa - corsa/NS.limiteTagliaMeno),
    // nota che min e max sommati danno la corsa, il limite così è simmetrico
    if (NS.tagliaMeno) {
      //  imposto variabili dei limiti
      this.minQuota = this.corsa / NS.limiteTagliaMeno;
      this.maxQuota = this.corsa - this.minQuota;
      // uso il quarto foro sempre finchè non esco dai limiti min e max
      if (((140 - NS.A.y) < this.maxQuota) && ((140 - NS.A.y) > this.minQuota)) {
        //quarto foro
        return 3;
      }
    }
    //NS.clog(this.ptIdeale.y);
    
    // se non sto nei limiti scelgo tra i quattro fori quelli 
    // con proporzioni migliori
    if ((this.ptIdeale.y < 65) && (this.attivoID < 6)) {
      //primo foro
      return 0;
    }
    if ((this.ptIdeale.y < 65) && (this.attivoID > 5)) {
      //secondo foro per ACE
      return 1;
    }
    if (this.ptIdeale.y > 125) {
      //quarto foro
      return 3;
    }
    if (this.ptIdeale.y < 95) {
      //secondo foro
      return 1;
    }
    //terzo foro 
    return 2;
  };


  NS.setCTMpistoni = function () {
    NS.AngPistF = NS.angoloAsseX(NS.ptCorsaX, NS.ptCorsaY, NS.B.x, NS.B.y);
    if (NS.AngPistF < 0) {
      NS.AngPistF += Math.PI;
    }
    NS.setCTM(this.inox, NS.ma.translate(NS.C.x, NS.C.y).rotate(NS.AngPist));
    NS.setCTM(this.inoxA, NS.ma.translate(0, 46).rotate((NS.AngPistF - NS.angFermo) * 57.2957795));
    NS.setCTM(this.ridutt, NS.ma.translate(NS.B.x, NS.B.y).rotate(NS.AngPist));
    NS.setCTM(this.riduttA, NS.ma.translate(NS.B.x, NS.B.y).rotate(NS.AngPistF * 57.2957795));
    NS.setCTM(NS.corta, NS.ma.translate(NS.C.x, NS.C.y - 46));
    NS.setCTM(NS.cortaA, NS.ma.translate(+NS.C.x - NS.A.x, NS.Ly));
    NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y).rotate(NS.angFermo * 57.2957795));
    NS.sta.setCTM();
  };


  NS.ottimizzaPistoni = function () {
    var nuovaCoordinata; 
    this.staTest = this.sceltaForo();
    // la logica del tagliare il meno possibile è nella scelta del foro,
    // qui si privilegia sempre il criterio di sfruttare tutta 
    // la corsa possibile del pistone: A+B dev'essere prossima a this.corsa
    nuovaCoordinata = {
        y: NS.sta.fori[this.staTest][1],
        x: -(this.corsa + NS.A.y - NS.A.x - NS.sta.fori[this.staTest][1])
      };
    var optimus = true;
    var better = 10000;
    while (optimus) {
      nuovaCoordinata.x++;
      if (this.prova(nuovaCoordinata)) {
        var diffAngoli = NS.angVoluto - NS.angFermo;
        if (Math.abs(diffAngoli) < better) {
          better = diffAngoli; //pisa pi curt
        } else {
          if (!this.nonMovibile(nuovaCoordinata)) {
          optimus = false;
          }
        }
      }
      // questo salva da possibili cicli infiniti e dice che non si è trovato niente.
      // caso test A(92,130)
      if (nuovaCoordinata.x > 0) {
        this.nonUsabile = true;
        return false;
      }
    }
    nuovaCoordinata.x--;
    if (this.prova(nuovaCoordinata)) {
      this.setCTM();
      this.nonUsabile = false;
      return true;
    }
    this.nonUsabile = true;
    
    return false;
  };

  NS.nonUsabilePistoni = function () {
    if (NS.A.y < this.cyAlimite) {
      this.nonUsabile = true;
      //NS.clog("Anta troppo distante per un " + this.mod);
      return true;
    }
    //NS.clog("Anta usabile con questo motore " + this.mod);
    this.nonUsabile = false;
    return false;
  };

  NS.initStaffePilastro = function () {
  /**
    staffe
  */
    NS.sta = document.createElementNS(NS.svgNS, "g");
    NS.sta.setAttribute("id", "staPilastro");
    /*
    NS.sta.staAtt = [0, 0, 5];
    NS.sta.staTest = [0, 0, 5];
    */
    NS.sta.fori = [
      [75, 50],
      [75, 80],
      [75, 110],
      [75, 140], // quarto foro delle nuove staffe a 4 fori
      [143, 77],
      [77, 57],
      [0, 0]
    ]; // foro1, foro2, foro3, foro4, Myhook lato pilastro, Myhook lato anta
    
    NS.sta.actstep = -1;

    NS.sta.s = [];
    NS.sta.s[0] = NS.creaElementi(NS.EGstaffa1, NS.sta);
    NS.sta.s[1] = NS.creaElementi(NS.EGstaffa2, NS.sta);
    NS.sta.s[2] = NS.creaElementi(NS.EGstaffa3, NS.sta);
    NS.sta.s[3] = NS.creaElementi(NS.EGstaffa4, NS.sta);
    NS.sta.s[4] = NS.creaElementi(NS.EGstaffaHook1, NS.sta);
    NS.sta.s[5] = NS.creaElementi(NS.EGstaffaHook2, NS.sta);
    NS.sta.s[6] = document.createElementNS(NS.svgNS, "g"); //flow placeholder
    NS.sta.appendChild(NS.sta.s[6]);
    for (var i = 0, len = NS.sta.s.length; i < len; i++) {
      NS.sta.s[i].setAttributeNS(null, "visibility", "hidden");
    }
    NS.vp.appendChild(NS.sta);

    NS.sta.aggiornaVisib = function () {
      NS.sta.s[NS.motori[NS.motPrec].staAtt].setAttributeNS(null, "visibility", "hidden");
      NS.sta.s[NS.motori[NS.motAtt].staPrec].setAttributeNS(null, "visibility", "hidden");
      NS.sta.s[NS.motori[NS.motAtt].staAtt].setAttributeNS(null, "visibility", "visible");
      NS.sta.setCTM();
      return;
    };

    NS.sta.setCTM = function () {
      NS.setCTM(NS.sta, NS.ma.translate(NS.B.x - (NS.sta.fori[NS.motori[NS.motAtt].staAtt][0]), NS.B.y - (NS.sta.fori[NS.motori[NS.motAtt].staAtt][1])));
    };

    NS.sta.aggiornaStep = function () {
      if (this.actstep !== NS.actstep) {
        NS.sta.s[NS.motori[NS.motAtt].staAtt].setAttributeNS(null, "visibility", "hidden");
      } else {
        NS.sta.s[NS.motori[NS.motAtt].staAtt].setAttributeNS(null, "visibility", "visible");
      }
    };
  };



  NS.initPunti = function () {
    NS.punti = document.createElementNS(NS.svgNS, "g");
    NS.punti.setAttribute("id", "punti");
    NS.punti.setAttributeNS(null, "stroke-width", 4 / NS.scala);
    NS.punti.setAttributeNS(null, "stroke", "#ACCB52");
    NS.punti.setAttributeNS(null, "fill-opacity", "0.65");


    NS.punti.aggiornaStep = function () {
      for (var i = 0, len = NS.punti.childNodes.length; i < len; i++) {
        NS.punti.childNodes[i].aggiornaStep();
      }
    };

    NS.A = NS.Punta(50, -130, "A", 1); //cerniera anta
    NS.B = NS.Punta(0, 0, "B", -1); //cerniera motore
    NS.C = NS.Punta(0, 0, "C", -1); //cerniera corta
    NS.D = NS.Punta(-150, -150, "D", 1); //controllo dimensioni pilastro
    NS.E = NS.Punta(+NS.A.x + NS.Lx, +NS.A.y + (NS.Ly), "E", 1); //controllo dimensioni anta
    NS.F = NS.Punta(+NS.A.x + Math.cos(NS.angVoluto) * 500, +NS.A.y + Math.sin(NS.angVoluto) * 500, "F", 1); //fermo apertura determina l'angolo di apertura voluto

    NS.O = document.createElementNS(NS.svgNS, "circle");
    NS.O.setAttributeNS(null, "cx", 0);
    NS.O.setAttributeNS(null, "cy", 0);
    //tooltips
    //F

    NS.F.tip = function () {
      var aVol = Math.floor(NS.angVoluto * 57.2957795);
      if (aVol > 140) {
        return "Massimo Angolo possibile";
      }
      return "Angolo Desiderato: " + aVol + "°";
    };
    NS.A.tip = function () {
      return "Posizione cerniera";
    };
    NS.B.tip = function () {
      return "Posizione staffa lunga";
    };
    NS.C.tip = function () {
      return "Posizione staffa corta";
    };
    NS.D.tip = function () {
      return "Dimensione pilastro";
    };
    NS.E.tip = function () {
      return "Dimensione anta";
    };


    NS.E.moveX = function (newX, dX) {
      if ((NS.Lx < 4501 || dX < 0) && (NS.Lx > 500 || dX > 0)) {
        if (arguments[2] === undefined) {
          NS.Lx = (newX - NS.A.x);
        }
        NS.E.setX(newX);
        NS.anta.ridisegnaX();
        if (NS.muro) {
            NS.muroLaterale.setAttributeNS(null, "height", NS.Lx-NS.D.y);
            NS.aggiornaAngoloMaxControMuro();
        }
        return true;
      }
      return false;
    };

    NS.E.moveY = function (newY) {
      if ((newY - NS.A.y) > 4 && (newY - NS.A.y) < 50) {
        NS.Ly = (newY - NS.A.y);
        NS.E.setY(newY);
        NS.setCTM(NS.fermo, NS.ma.rotate(NS.angVoluto * 57.2957795).translate(NS.Lx / 2, NS.Ly));
        NS.anta.ridisegnaY();
        return true;
      }
    };

    //una funzione sola per X e Y, dovrebbe essere più performante
    // anche se lega X e Y, se la provaPistone fallisce si può provare a 
    // salvarla mantenendo la B.y precedente, in modo da non disturbare 
    // l'usabilità
    NS.B.move = function (newX, dX, newY, dY) {
      return NS.motori[NS.motAtt].move(newX, dX, newY, dY);
    };
    
    NS.F.chiudiAntaFincheBasta = function () {
      if (NS.angoloMaxControMuro < NS.angVoluto) {
      NS.angVoluto = NS.angoloMaxControMuro;
      var wanAngolo =  NS.angoloMaxControMuro * 57.2957795;
      NS.F.setX(+NS.A.x + Math.cos(NS.angoloMaxControMuro) * 500);
      NS.F.setY(+NS.A.y + Math.sin(NS.angoloMaxControMuro) * 500);
      NS.setCTM(NS.limiteangolo, NS.ma.rotate(wanAngolo));
      NS.setCTM(NS.fermo, NS.ma.rotate(wanAngolo).translate(NS.Lx / 2, NS.Ly));
      NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y).rotate(wanAngolo));
      }
    };

    NS.F.move = function (newX, dX, newY) {
      // determina nuovo angolo
      var niuAngolo = Math.atan2(newY - NS.A.y, newX - NS.A.x), wanAngolo = niuAngolo * 57.2957795;
      //apertura possibile tra 140 gradi e 80 gradi
      if ((NS.muro) && (niuAngolo > NS.angoloMaxControMuro)) {
      //verifico la tangenza dell'anta contro il muro laterale
      // confronto angolo massimo anta contro muro laterale con angolo niuAngolo
        return false;
      }
      if ((niuAngolo < 3) && (niuAngolo > 1.2)) {
        NS.angVoluto = niuAngolo;
        NS.F.setX(+NS.A.x + Math.cos(NS.angVoluto) * 500);
        NS.F.setY(+NS.A.y + Math.sin(NS.angVoluto) * 500);
        NS.setCTM(NS.limiteangolo, NS.ma.rotate(wanAngolo));
        NS.setCTM(NS.fermo, NS.ma.rotate(wanAngolo).translate(NS.Lx / 2, NS.Ly));
        NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y).rotate(wanAngolo));
        return true;
      }
      return false;
    };
    
    NS.C.moveX = function (newX) {
      if (NS.motAtt === 4) {
        return NS.motori[4].spostaCorta(newX);
      }
      /*if (-600 < newX && newX < -50) {
        NS.pilastro.setAttributeNS(null, "width", -newX);
        NS.pilastro.setAttributeNS(null, "x", newX);
        NS.D.setX(newX);*/
        return true;
      //}
    };
    
    NS.C.moveY = function () {
      return false;
    };


    NS.D.moveX = function (newX) {
      if (-600 < newX && newX < -50) {
        NS.pilastro.setAttributeNS(null, "width", -newX);
        NS.pilastro.setAttributeNS(null, "x", newX);
        NS.D.setX(newX);
        if (NS.muro) {
        NS.muroLaterale.setAttributeNS(null, "x", newX-100);
        NS.aggiornaAngoloMaxControMuro();
        }
        return true;
      }
    };

    NS.D.moveY = function (newY, dY) {
      if (-2000 < newY && newY < -50) {
        NS.pilastro.setAttributeNS(null, "height", -newY);
        NS.pilastro.setAttributeNS(null, "y", newY);
        if ((dY > 0) && (NS.D.y > (NS.A.y - 20))) {
          NS.A.moveY(newY + 20, dY + 20);
        }
        NS.D.setY(newY);
        if (NS.muro) {
        NS.muroLaterale.setAttributeNS(null, "y", newY);
        NS.muroLaterale.setAttributeNS(null, "height", NS.Lx-newY);
        NS.aggiornaAngoloMaxControMuro();
        }
        return true;
      }
      return false;
    };

    NS.A.moveX = function (newX, dX) {
      if (10 < newX && newX < 351) {
        NS.cerniera.childNodes[0].setAttributeNS(null, "x", -newX);
        NS.cerniera.childNodes[0].setAttributeNS(null, "width", newX + 20);
        NS.A.setX(newX);
        NS.setCTM(NS.cerniera, NS.ma.translate(NS.A.x, NS.A.y));
        NS.setCTM(NS.anta, NS.ma.translate(NS.A.x, NS.A.y));
        NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y));
        NS.E.moveX(newX + NS.Lx, dX, 1);
        NS.F.setX(+newX + Math.cos(NS.angVoluto) * 500);
        if (NS.muro) {
        NS.aggiornaAngoloMaxControMuro();
        }
        return true;
      }
      return false;
    };


    NS.A.moveY = function (newY, dY) {
      if ((dY < 0) && (NS.D.y > (NS.A.y - 20))) {
        if (!NS.D.moveY(newY - 20, dY - 20)) {
          return false;
        }
      }
      if ((dY > 0) && ((NS.A.y + NS.minyA) > 0)) {
        return false;
      }
      NS.A.setY(newY);
      NS.setCTM(NS.cerniera, NS.ma.translate(NS.A.x, NS.A.y));
      NS.setCTM(NS.anta, NS.ma.translate(NS.A.x, NS.A.y));
      NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y));
      NS.E.setY(+newY + (NS.Ly));
      NS.F.setY(+newY + Math.sin(NS.angVoluto) * 500);
      if (NS.muro) {
      NS.aggiornaAngoloMaxControMuro();
      }
      return true;
    };

  };


  /**
   * Quota.
   */
  NS.qqg = function () {

    NS.quota = NS.creaElementi(NS.EGquota, NS.vp);

    NS.quota.A = {
      "x": function () {
        return 0;
      },
      "y": function () {
        return 0;
      }
    };

    NS.quota.B = {
      "x": function () {
        return 0;
      },
      "y": function () {
        return 0;
      }
    };

    NS.quota.C = {
      "x": function () {
        return +NS.A.x;
      },
      "y": function () {
        return +NS.A.y;
      }
    };

    NS.quota.D = {
      "x": function () {
        return 0;
      },
      "y": function () {
        return 0;
      }
    };

    NS.quota.E = {
      "x": function () {
        return +NS.A.x;
      },
      "y": function () {
        return +NS.A.y;
      } //raddoppia la quota
    };

    NS.quota.F = {
      "x": function () {
        return 0;
      },
      "y": function () {
        return 0;
      }
    };

    NS.quota.nascondisempreX = {
      "A": false,
      "B": false,
      "C": false,
      "D": false,
      "E": false,
      "F": true
    };
    
    NS.quota.nascondisempreY = {
      "A": false,
      "B": false,
      "C": true,
      "D": false,
      "E": false,
      "F": true
    };

    NS.quota.aggiorna = function () {
      var cxPun, cyPun, cxRif, cyRif, cMax, mX, dist, lineeX, lunghezzaTesto, offsetX, scalaT, id = NS.selectedElement.id;

      //disegna la quota x
      if (id === "F") {
        return;
      }

      cxPun = +NS[id].x;
      cyPun = +NS[id].y;
      cxRif = this[id].x();
      cyRif = this[id].y();
      cMax = Math.max(cyRif, cyPun) + 80;
      mX = (cxRif > cxPun) ? -1 : 1; //verificare se punto è a destra di rif
      dist = Math.floor(Math.abs(cxRif - cxPun));
      //righe
      lineeX = " " + cxPun + "," + (cyPun + 30) + " " + cxPun + "," + (+cMax + 20) + " " + cxPun + "," + cMax + " " + (+cxPun + 20 * mX) + "," + cMax + " " + (+cxRif - 20 * mX) + "," + cMax + " " + cxRif + "," + cMax + " " + cxRif + "," + (+cMax + 20) + " " + cxRif + "," + (+cyRif + 30);
      this.childNodes[0].setAttribute("points", lineeX);
      //testo quota
      if (id === "E") {
        offsetX = 0.8;
      } else {
        offsetX = 0.5;
      }
      scalaT = 20 / NS.scala;
      this.childNodes[2].setAttribute("font-size", scalaT);
      this.childNodes[2].setAttribute("x", (cxRif + cxPun) * offsetX);
      this.childNodes[2].setAttribute("y", (cMax + scalaT * 2));
      this.childNodes[2].textContent = dist + " mm";
      lunghezzaTesto = 10 + this.childNodes[2].getComputedTextLength();
      //rettangolo sotto testo quota
      this.childNodes[1].setAttributeNS(null, "width", lunghezzaTesto);
      this.childNodes[1].setAttributeNS(null, "height", scalaT + 3);
      this.childNodes[1].setAttribute("x", (cxRif + cxPun) * offsetX - 5);
      this.childNodes[1].setAttribute("y", (cMax + scalaT + 1));

      //disegna la quota y
      if (id !== "C") {
        cMax = Math.max(cxRif, cxPun) + 80;
        mX = (cyRif > cyPun) ? -1 : 1; //verificare se punto è sopra di rif
        dist = Math.floor(Math.abs(cyRif - cyPun));
        if (id === "E") {
          dist = 2 * dist;
          cyRif = (cyPun - mX * dist);
        }
        lineeX = " " + (cxPun + 30) + "," + cyPun + " " + (+cMax + 20) + "," + cyPun + " " + cMax + "," + cyPun + " " + cMax + "," + (+cyPun + 20 * mX) + " " + cMax + "," + (+cyRif - 20 * mX) + " " + cMax + "," + cyRif + " " + (+cMax + 20) + "," + cyRif + " " + (+cxRif + 30) + "," + cyRif;
        this.childNodes[3].setAttribute("points", lineeX);
        //testo quota
        this.childNodes[5].setAttribute("font-size", scalaT);
        this.childNodes[5].setAttribute("x", (cMax + 26));
        this.childNodes[5].setAttribute("y", ((cyRif + cyPun) / 2 + scalaT));
        this.childNodes[5].textContent = dist + " mm";
        lunghezzaTesto = 10 + this.childNodes[5].getComputedTextLength();
        //rettangolo sotto testo quota
        this.childNodes[4].setAttributeNS(null, "width", lunghezzaTesto);
        this.childNodes[4].setAttributeNS(null, "height", scalaT + 3);
        this.childNodes[4].setAttribute("x", (cMax + 20));
        this.childNodes[4].setAttribute("y", (cyRif + cyPun) / 2 + 1);
      }

    };

    NS.quota.mostra = function () {
      var i, len;
      NS.quota.aggiorna();
      if (!NS.quota.nascondisempreX[NS.selectedElement.id]) {
        for (i = 0, len = 3; i < len; i++) {
          NS.quota.childNodes[i].setAttributeNS(null, "visibility", "visible");
        }
      }
      if (!NS.quota.nascondisempreY[NS.selectedElement.id]) {
        for (i = 3, len = 6; i < len; i++) {
          NS.quota.childNodes[i].setAttributeNS(null, "visibility", "visible");
        }
      }
    };

    NS.quota.nascondi = function () {
      for (var i = 0, len = NS.quota.childNodes.length; i < len; i++) {
        NS.quota.childNodes[i].setAttributeNS(null, "visibility", "hidden");
      }
    };
    NS.quota.nascondi();
  };

  /**
   * Punto.
   */
  NS.Punta = function (x, y, id, step) {
    var that = document.createElementNS(NS.svgNS, "circle");
    that.actstep = step;
    that.x = 0;
    that.y = 0;

    that.aggiornaStep = function () {
      if (that.actstep !== NS.actstep) {
        that.setAttributeNS(null, "visibility", "hidden");
      } else {
        that.setAttributeNS(null, "visibility", "visible");
      }
    };

    that.move = function () {
      var okX = that.moveX(arguments[0], arguments[1]);
      var okY = that.moveY(arguments[2], arguments[3]);
      return (okX || okY); //posso muovere almeno lungo un asse, aggiornerò le quote
    };

    that.setX = function (cx) {
      if (typeof cx !== "number") {
        //NS.clog(cx + " non è un numero! è " + (typeof cx));
      }
      that.x = cx;
      that.setAttributeNS(null, "cx", cx);
    };

    that.setY = function (cy) {
      if (typeof cy !== "number") {
        //NS.clog(cy + " non è un numero! è " + (typeof cy));
      }
      that.y = cy;
      that.setAttributeNS(null, "cy", cy);
    };

    that.setAttributeNS(null, "id", id);
    that.setX(x);
    that.setY(y);
    that.setAttributeNS(null, "r", "25");
    that.setAttributeNS(null, "class", "drag");
    that.onmousedown = NS.selezionaPunto;
    NS.punti.appendChild(that);
    return that;
  };


  /**
   * Pulsante.
   */
  NS.Pulsante = function (id, v) {
    var group = document.createElementNS(NS.svgNS, "g");
    var that = document.createElementNS(NS.svgNS, "rect");
    var etichetta = document.createElementNS(NS.svgNS, "text");
    group.appendChild(that);
    group.appendChild(etichetta);
    that.visibile = 1 || v;
    if (!v) {
      that.setAttributeNS(null, "visibility", "hidden");
      etichetta.setAttributeNS(null, "visibility", "hidden");
    }
    group.setAttributeNS(null, "id", id);
    that.setAttributeNS(null, "width", 300);
    that.setAttributeNS(null, "height", 60);
    that.setAttributeNS(null, "fill", "#fff");
    that.setAttributeNS(null, "fill-opacity", 1);
    that.setAttributeNS(null, "stroke", "#d5d5d5");
    that.setAttributeNS(null, "stroke-width", 1);
    etichetta.setAttributeNS(null, "x", 50);
    etichetta.setAttributeNS(null, "y", 35);
    etichetta.setAttributeNS(null, "font-family", "Verdana");
    etichetta.setAttributeNS(null, "font-size", 20);
    etichetta.setAttributeNS(null, "fill", "#555");
    etichetta.setAttributeNS(null, "stroke-opacity", "0");
    NS.pulsanti.appendChild(group);

    group.onmousedown = NS.selezionaPulsante;
    //if (group.captureEvents) group.captureEvents(Event.MOUSEDOWN);
    return group;
  };

  NS.ttg = function () {
    NS.tooltip = document.createElementNS(NS.svgNS, "g");
    NS.SVGEl.appendChild(NS.tooltip);
    var tt1 = document.createElementNS(NS.svgNS, "path");
    tt1.setAttribute("d", "m -5,0 -100,0 0,39 90,0 15,4 -5,-14 z");
    tt1.setAttribute("fill", "#EFF5FF");
    tt1.setAttribute("stroke", "#73A6FF");
    tt1.setAttribute("stroke-width", "2");
    NS.tooltip.appendChild(tt1);
    NS.ttWidth = 0;
    NS.ttTesto = "SVG and Javascript Tooltip";

    var tt2 = document.createElementNS(NS.svgNS, "text");
    tt2.setAttribute("font-size", "18");
    tt2.setAttribute("font-family", "arial");
    tt2.setAttribute("fill", "#000");
    tt2.setAttribute("y", "26");
    NS.tooltip.appendChild(tt2);
    tt2.textContent = NS.ttTesto;

    NS.tooltip.mostra = function (testo) {
      this.aggiorna(testo);
      this.setAttributeNS(null, "visibility", "visible");
    };

    NS.tooltip.aggiorna = function (testo) {
      if (testo !== NS.ttTesto) {
        var width;
        NS.ttTesto = testo;
        width = testo.length * 10;
        if (NS.ttWidth !== width) {
          NS.ttWidth = width;
          this.childNodes[1].setAttribute("x", (-NS.ttWidth - 15));
          this.childNodes[0].setAttribute("d", "m -25,0 -" + NS.ttWidth + ",0 0,39  " + NS.ttWidth + ",0 15,4 -5,-14 z");
        }
        //aggiorno anche il testo
        this.childNodes[1].textContent = testo;
      }
      //sposto solo la tooltip
      NS.setCTM(this, NS.ma.translate(NS.client.X - 8, NS.client.Y - 60));
    };

    NS.tooltip.nascondi = function () {
      this.setAttributeNS(null, "visibility", "hidden");
    };

    NS.tooltip.nascondi();
  };

  NS.puntiTest = function () {
    NS.testPt1 = document.createElementNS(NS.svgNS, "circle");
    NS.testPt2 = document.createElementNS(NS.svgNS, "circle");
    NS.testPt1.setAttributeNS(null, "cx", 0);
    NS.testPt1.setAttributeNS(null, "cy", 0);
    NS.testPt1.setAttributeNS(null, "r", 5);
    NS.testPt1.setAttributeNS(null, "fill", "#dea");
    NS.testPt2.setAttributeNS(null, "cx", 0);
    NS.testPt2.setAttributeNS(null, "cy", 0);
    NS.testPt2.setAttributeNS(null, "r", 5);
    NS.testPt2.setAttributeNS(null, "fill", "#ade");
    NS.vp.appendChild(NS.testPt1);
    NS.vp.appendChild(NS.testPt2);

  };
  
  NS.creadefs = function () {
  var filtroOmbra = document.createElementNS(NS.svgNS,'filter');
  filtroOmbra.setAttribute("id","filtroOmbra");
  var gauss = document.createElementNS("http://www.w3.org/2000/svg", "feGaussianBlur");
  gauss.setAttribute("stdDeviation","5");
  gauss.setAttribute("result","sfocatura");
  filtroOmbra.appendChild(gauss);
  var comp1 = document.createElementNS("http://www.w3.org/2000/svg", "feComposite");
  comp1.setAttribute("in","SourceGraphic");
  comp1.setAttribute("in2","sfocatura"); 
  comp1.setAttribute("operator","out");
  comp1.setAttribute("result","combina1"); 
  filtroOmbra.appendChild(comp1);
  var flood = document.createElementNS("http://www.w3.org/2000/svg", "feFlood");
  flood.setAttribute("flood-color","black");
  flood.setAttribute("flood-opacity","0.2");
  flood.setAttribute("result","nerizza"); 
  filtroOmbra.appendChild(flood);
  var comp2 = document.createElementNS("http://www.w3.org/2000/svg", "feComposite");
  comp2.setAttribute("in","nerizza");
  comp2.setAttribute("in2","combina1"); 
  comp2.setAttribute("operator","in");
  comp2.setAttribute("result","ombra"); 
  filtroOmbra.appendChild(comp2);
  var comp3 = document.createElementNS("http://www.w3.org/2000/svg", "feComposite");
  comp3.setAttribute("in","ombra");
  comp3.setAttribute("in2","SourceGraphic"); 
  comp3.setAttribute("operator","over");
  filtroOmbra.appendChild(comp3);
  NS.defs.appendChild(filtroOmbra);
  NS.creaElementi(NS.EGdefs, NS.defs);
  };
  
  NS.reticolo = function () {
    var gridPattern = NS.creaElementi(NS.EGpatternGrid, NS.defs,"pattern");
    gridPattern.setAttributeNS(null, "patternUnits", "userSpaceOnUse");
    gridPattern.setAttributeNS(null, "width", 500);
    gridPattern.setAttributeNS(null, "height", 500);
    gridPattern.setAttributeNS(null, "x", "-50");
    gridPattern.setAttributeNS(null, "y", "-50");
    var carta = document.createElementNS(NS.svgNS,'rect');
    carta.setAttributeNS(null, "width", "8000");
    carta.setAttributeNS(null, "height", "6000");
    carta.setAttributeNS(null, "x", "-2000");
    carta.setAttributeNS(null, "y", "-2000");
    carta.setAttributeNS(null, "stroke", "none");
    carta.setAttributeNS(null, "fill", "url(#patternGrid_mygate)");
    NS.vp.appendChild(carta);
  };
  
  NS.gauge = function () {
  NS.gel1 = NS.creaElementi(NS.EGgauge, NS.pulsanti);
  NS.gel1.setAttributeNS(null, "id", "gauge1");
  NS.gel1.actstep = 0;
  NS.gel1.scala = 1;
  NS.gel1.suffisso = "°";
  NS.setCTM(NS.gel1, NS.ma.translate(20, 700));
  NS.gel2 = NS.creaElementi(NS.EGgauge, NS.pulsanti);
  NS.gel2.setAttributeNS(null, "id", "gauge2");
  NS.gel2.actstep = 0;
  NS.gel2.scala = 0.5555;
  NS.gel2.suffisso = "%";
  NS.setCTM(NS.gel2, NS.ma.translate(20, 800));
  
  NS.impostaGauge = function (valore) {
    var gradi = Math.ceil(this.scala * valore * 57.2957795);
    var x1 = 80-(Math.cos(valore)*40);
    var y1 = -Math.sin(valore)*40;
    var x2 = 80-(Math.cos(valore)*80);
    var y2 = -Math.sin(valore)*80;
    var curva = "M 0,0 40,0 A 40,40 0 0 1 " + x1 + "," + y1 + " L " + x2 + "," + y2 + " A 80,80 1 0 0 0,0 z";
    this.childNodes[1].setAttributeNS(null,"d", curva);
    this.childNodes[2].textContent = gradi+ this.suffisso;
  };
  NS.gel1.imposta = NS.impostaGauge;
  NS.gel2.imposta = NS.impostaGauge;
  };

  NS.initElementi = function () {
    NS.creadefs();
    NS.reticolo();
    NS.initPunti();
    NS.J = NS.SVGEl.createSVGPoint();
    NS.K = NS.SVGEl.createSVGPoint();
    NS.L = NS.SVGEl.createSVGPoint(); //posizione del corrispettivo di NS.C ad anta aperta contro il fermo. Serve per fare un inoxA.translate()

    //quota
    NS.qqg();
    
    // staffe sul pilastro
    NS.initStaffePilastro();
    NS.corta = NS.creaElementi(NS.EGcorta, NS.vp);
    NS.initAntaA();
    // motori
    NS.motori = [new NS.Motore("myaster3"), new NS.Motore("myaster4"), new NS.Motore("myaster5"), new NS.Motore("myaster6"), new NS.Motore("myhook"), new NS.Motore("myflow"), new NS.Motore("ace3"), new NS.Motore("ace4")];
    NS.motori.attiva = function (mot) {
      //NS.clog("Sto attivando il motore " + mot);
      if (mot === 5) {
        NS.motori[5].riduttA.setAttributeNS(null, "visibility", "visible");
        NS.corta.setAttributeNS(null, "visibility", "hidden");
        NS.cortaA.setAttributeNS(null, "visibility", "hidden");
        NS.B.setAttributeNS(null, "visibility", "hidden");
      }
      if (mot !== 5) {
        NS.motori[5].riduttA.setAttributeNS(null, "visibility", "hidden");
        NS.corta.setAttributeNS(null, "visibility", "visible");
        NS.cortaA.setAttributeNS(null, "visibility", "visible");
        NS.B.setAttributeNS(null, "visibility", "visible");
      }
      NS.motPrec = NS.motAtt;
      NS.motAtt = mot;
      NS.aggiornaBC();
      NS.motori.aggiornaStep();
    };

    NS.motori.aggiornaStep = function () {
      for (var i = 0, len = NS.motori.length; i < len; i++) {
        NS.motori[i].aggiornaStep();
      }
    };
    
    NS.motori.ottimizza = function () {
      // si sceglie di attivare il motore con l'ottimizzazione migliore.
      var motoreMigliore = 0, motoreMiglioreValoreOttimizzazione = 0;
      for (var i = 0, len = NS.motori.length; i < len; i++) {
        NS.motori.attiva(i);
        NS.sta.aggiornaVisib();
        NS.motori[i].testNonUsabile();
        NS.motori[i].ottimizza();
        if (NS.motori[i].nonUsabile) {
          NS.motori[i].pulsante.setAttributeNS(null, "visibility", "hidden");
        } else {
          motoreMigliore = i; //escamotage temporaneo fino a quando manca valoreOttimizzazione . TODO 
          NS.motori[i].pulsante.setAttributeNS(null, "visibility", "visible");
          if (NS.motori[i].valoreOttimizzazione > motoreMiglioreValoreOttimizzazione) {
            motoreMigliore = i;
            motoreMiglioreValoreOttimizzazione = NS.motori[i].valoreOttimizzazione;
          }
        }
      }
      NS.motori.attiva(motoreMigliore);
      NS.motori[motoreMigliore].ottimizza();
      
      NS.aggiornaApertura();
    };


    // cerniera
    NS.cerniera = NS.creaElementi(NS.EGcerniera, NS.vp);
    // pilastro
    NS.initPilastro();

    // fermo apertura
    NS.limiteangolo = NS.cerniera.childNodes[3];
    NS.fermo = NS.cerniera.childNodes[4];
    NS.setCTM(NS.limiteangolo, NS.ma.rotate(NS.angVoluto * 57.2957795));
    NS.setCTM(NS.fermo, NS.ma.rotate(NS.angVoluto * 57.2957795).translate(NS.Lx / 2, NS.Ly));
    
    // apertura 
    NS.apertura = NS.creaElementi(NS.EGapertura, NS.vp);

    NS.apertura.actstep = -1;

    NS.apertura.aggiornaStep = function () {
      if (this.actstep !== NS.actstep) {
        this.setAttributeNS(null, "visibility", "hidden");
        //NS.cortaA.setAttributeNS(null, "visibility", "hidden");
      } else {
        this.setAttributeNS(null, "visibility", "visible");
        //NS.cortaA.setAttributeNS(null, "visibility", "visible");
      }
    };


    // staffa corta
    NS.cortaA = NS.creaElementi(NS.EGcorta, NS.antaA);
    NS.cortaA.setAttribute("id", NS.cortaA.getAttribute("id") + "A");
    NS.cortaA.setAttributeNS(null, "fill", "none");
    NS.cortaA.setAttributeNS(null, "stroke", "#dadada");

    NS.cortaA.appendChild(NS.motori[0].inoxA);
    NS.cortaA.appendChild(NS.motori[1].inoxA);
    NS.cortaA.appendChild(NS.motori[2].inoxA);
    NS.cortaA.appendChild(NS.motori[3].inoxA);
    NS.cortaA.appendChild(NS.motori[6].inoxA);
    NS.cortaA.appendChild(NS.motori[7].inoxA);
    NS.setCTM(NS.motori[0].inoxA, NS.ma.translate(0, 46));
    NS.setCTM(NS.motori[1].inoxA, NS.ma.translate(0, 46));
    NS.setCTM(NS.motori[2].inoxA, NS.ma.translate(0, 46));
    NS.setCTM(NS.motori[3].inoxA, NS.ma.translate(0, 46));
    NS.setCTM(NS.motori[6].inoxA, NS.ma.translate(0, 46));
    NS.setCTM(NS.motori[7].inoxA, NS.ma.translate(0, 46));

    NS.corta.actstep = -1;
    NS.corta.aggiornaStep = function () {
      if (this.actstep !== NS.actstep) {
        this.setAttributeNS(null, "visibility", "hidden");
      } else {
        this.setAttributeNS(null, "visibility", "visible");
      }
    };

    NS.corta.aggiornaStep();
    NS.apertura.aggiornaStep();
    // anta
    NS.initAnta();
    NS.aggiornaAngoloMaxControMuro();



    // imposta matrici
    NS.setCTM(NS.cerniera, NS.ma.translate(NS.A.x, NS.A.y));
    NS.sta.setCTM();
    NS.setCTM(NS.anta, NS.ma.translate(NS.A.x, NS.A.y));
    NS.setCTM(NS.antaA, NS.ma.translate(NS.A.x, NS.A.y).rotate(NS.angVoluto * 57.2957795));
    // bordo
    NS.bordo = NS.creaElementi(NS.EGbordo, NS.SVGEl);


    NS.pulsanti = document.createElementNS(NS.svgNS, "g");
    NS.pulsanti.setAttributeNS(null, "id", "pulsanti_mygate");
    NS.SVGEl.appendChild(NS.pulsanti);

    //tooltip
    NS.ttg();

    NS.pulsanti.aggiornaStep = function () {
      for (var i = 0, len = NS.pulsanti.childNodes.length; i < len; i++) {
        if (NS.pulsanti.childNodes[i].actstep !== -1) {
          if ((NS.pulsanti.childNodes[i].actstep === NS.actstep) || (NS.pulsanti.childNodes[i].actstep === 0)) {
            NS.pulsanti.childNodes[i].setAttributeNS(null, "visibility", "visible");
          } else {
            NS.pulsanti.childNodes[i].setAttributeNS(null, "visibility", "hidden");
          }
        } else {
            NS.pulsanti.childNodes[i].setAttributeNS(null, "visibility", "hidden");
        }
      }
    };

    NS.P1 = new NS.Pulsante("step_mygate", 1);
    NS.P1.actstep = 0;
    NS.zoomout = NS.creaElementi(NS.EGzoommeno, NS.pulsanti);
    NS.zoomout.actstep = 0;
    NS.zoomin = NS.creaElementi(NS.EGzoompiu, NS.pulsanti);
    NS.zoomin.actstep = 0;
    NS.switchMuro = NS.creaElementi(NS.EGpulsanteMuro, NS.pulsanti);
    NS.switchMuro.actstep = 1; 
    NS.motori[0].pulsante = NS.creaElementi(NS.EGpulsanteA3, NS.pulsanti);
    NS.motori[0].pulsante.actstep = -1;
    NS.motori[1].pulsante = NS.creaElementi(NS.EGpulsanteA4, NS.pulsanti);
    NS.motori[1].pulsante.actstep = -1;
    NS.motori[2].pulsante = NS.creaElementi(NS.EGpulsanteA5, NS.pulsanti);
    NS.motori[2].pulsante.actstep = -1;
    NS.motori[3].pulsante = NS.creaElementi(NS.EGpulsanteA6, NS.pulsanti);
    NS.motori[3].pulsante.actstep = -1;
    NS.motori[4].pulsante = NS.creaElementi(NS.EGpulsanteHook, NS.pulsanti);
    NS.motori[4].pulsante.actstep = -1;
    NS.motori[5].pulsante = NS.creaElementi(NS.EGpulsanteFlow, NS.pulsanti);
    NS.motori[5].pulsante.actstep = -1;
    NS.motori[6].pulsante = NS.creaElementi(NS.EGpulsaceA3, NS.pulsanti);
    NS.motori[6].pulsante.actstep = -1;
    NS.motori[7].pulsante = NS.creaElementi(NS.EGpulsaceA4, NS.pulsanti);
    NS.motori[7].pulsante.actstep = -1;
    for (var i = 0, len = NS.pulsanti.childNodes.length; i < len; i++) {
    NS.pulsanti.childNodes[i].setAttributeNS(null, "filter", "url(#filtroOmbra)");
    }
    NS.setCTM(NS.zoomin, NS.ma.translate(10, 70));
    NS.setCTM(NS.zoomout, NS.ma.translate(10, 140));
    NS.setCTM(NS.switchMuro, NS.ma.translate(10, 210));
    NS.setCTM(NS.motori[0].pulsante, NS.ma.translate(10, 210));
    NS.setCTM(NS.motori[1].pulsante, NS.ma.translate(10, 280));
    NS.setCTM(NS.motori[2].pulsante, NS.ma.translate(10, 350));
    NS.setCTM(NS.motori[3].pulsante, NS.ma.translate(10, 420));
    NS.setCTM(NS.motori[4].pulsante, NS.ma.translate(80, 210));
    NS.setCTM(NS.motori[5].pulsante, NS.ma.translate(80, 280));
    NS.setCTM(NS.motori[6].pulsante, NS.ma.translate(80, 350));
    NS.setCTM(NS.motori[7].pulsante, NS.ma.translate(80, 420));
    NS.zoomout.onmousedown = NS.zoomOut;
    NS.zoomin.onmousedown = NS.zoomIn;
    NS.switchMuro.onmousedown = NS.abilitaMuro;
    NS.motori[0].pulsante.onmousedown = NS.setMotore0;
    NS.motori[1].pulsante.onmousedown = NS.setMotore1;
    NS.motori[2].pulsante.onmousedown = NS.setMotore2;
    NS.motori[3].pulsante.onmousedown = NS.setMotore3;
    NS.motori[4].pulsante.onmousedown = NS.setMotore4;
    NS.motori[5].pulsante.onmousedown = NS.setMotore5;
    NS.motori[6].pulsante.onmousedown = NS.setMotore6;
    NS.motori[7].pulsante.onmousedown = NS.setMotore7;
    NS.aggiornaStep(1);
    NS.gauge();

    if (NS.test) {
      NS.puntiTest();
    }
    NS.vp.appendChild(NS.punti); //vogliamo vederli sempre, lasciarli per ultimi
    NS.vp.appendChild(NS.quota);
  };

  NS.aggiornaStep = function (step) {
    NS.actstep = step || -NS.actstep;
    NS.punti.aggiornaStep();
    NS.pulsanti.aggiornaStep();
    if (NS.actstep === 1) {
      NS.P1.childNodes[1].textContent = "STEP 1: setup";
      NS.corta.setAttributeNS(null, "visibility", "hidden");
      NS.cortaA.setAttributeNS(null, "visibility", "hidden");
      NS.motori[3].riduttA.setAttributeNS(null, "visibility", "hidden");
    }
    if (NS.actstep === -1) {
      NS.P1.childNodes[1].textContent = "STEP 2: ottimizza";
      NS.calcolaAngoloMassimoControPilastro();
      NS.motori.ottimizza();
    }

    NS.motori.aggiornaStep();
    NS.apertura.aggiornaStep();
    NS.sta.aggiornaStep();
  };
  
  NS.aggiornaBC = function () {
    NS.bc = NS.motori[NS.motAtt].ipo;
  };

  NS.aggiornaBCX = function (B) {
  //NS.clog("NS.motori[NS.motAtt].ipo2 " + NS.motori[NS.motAtt].ipo2);
  var bcx = Math.sqrt(NS.motori[NS.motAtt].ipo2 - Math.pow(B.y -NS.A.y -NS.Ly  -46, 2)) +B.x;
  return bcx;
  };
  
  NS.aggiornaAngoloMaxControMuro = function () {
    var k = NS.D.x - NS.Ly - NS.A.x, dy = Math.sqrt((NS.Lx * NS.Lx) - (k * k));
    NS.angoloMaxControMuro = Math.atan2(dy, NS.D.x-NS.A.x+NS.Ly);
    NS.F.chiudiAntaFincheBasta();
  };
  
  NS.getAngoloMaxControMuro = function () {
    if (NS.muro) { return NS.angoloMaxControMuro;} else { return 3;}
  };

  NS.setMotore0 = function () {
    NS.motori.attiva(0);
    NS.motori[0].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };

  NS.setMotore1 = function () {
    NS.motori.attiva(1);
    NS.motori[1].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };

  NS.setMotore2 = function () {
    NS.motori.attiva(2);
    NS.motori[2].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };

  NS.setMotore3 = function () {
    NS.motori.attiva(3);
    NS.motori[3].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };

  NS.setMotore4 = function () {
    NS.motori.attiva(4);
    NS.motori[4].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };

  NS.setMotore5 = function () {
    NS.motori.attiva(5);
    NS.motori[5].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };
  
  NS.setMotore6 = function () {
    NS.motori.attiva(6);
    NS.motori[6].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };

  NS.setMotore7 = function () {
    NS.motori.attiva(7);
    NS.motori[7].ottimizza();
    NS.sta.aggiornaVisib();
    NS.aggiornaApertura();
  };

  NS.zoomIn = function () {
    if (NS.scala < 4) {
      NS.setCTM(NS.vp, NS.vp.getCTM().scale(1 / NS.scala));
      NS.scala = NS.scala + 0.25;
      NS.setCTM(NS.vp, NS.vp.getCTM().scale(NS.scala));
      NS.punti.setAttributeNS(null, "stroke-width", 5 / NS.scala);
    }
  };


  NS.zoomOut = function () {
    if (NS.scala > 0.25) {
      NS.setCTM(NS.vp, NS.vp.getCTM().scale(1 / NS.scala));
      NS.scala = NS.scala - 0.25;
      NS.setCTM(NS.vp, NS.vp.getCTM().scale(NS.scala));
      NS.punti.setAttributeNS(null, "stroke-width", 5 / NS.scala);
    }
  };
  
  NS.abilitaMuro = function () {
    NS.muro = !NS.muro;
    if (!NS.muro) {
    NS.muroLaterale.setAttributeNS(null, "visibility", "hidden");
    } else {
    NS.muroLaterale.setAttributeNS(null, "x", NS.D.x-100);
    NS.muroLaterale.setAttributeNS(null, "y", NS.D.y);
    NS.aggiornaAngoloMaxControMuro();
    NS.muroLaterale.setAttributeNS(null, "visibility", "visible");
    }
  };

  NS.wrapEvent = function (e) {
    if (e === undefined) {
      e = window.event;
    }
    e.cancelBubble = true;
    if (e.stopPropagation) {
      e.stopPropagation();
    }
    if (e.preventDefault) {
      e.preventDefault();
    }
    return e;
  };

  NS.selezionaPulsante = function (e) {
    e = NS.wrapEvent(e);
    NS.selectedPulsante = e.target;
    if (NS.selectedPulsante.parentNode.id === "step_mygate") {
      NS.aggiornaStep();
    }
  };

  NS.selezionaSVG = function (e) {
    e = NS.wrapEvent(e);
    NS.client = NS.coordinateXY(e);
    NS.selectedSVG = e.target;
    // Pan mode
    NS.pan = true;
    NS.stateMatrix = NS.vp.getCTM();
    NS.locoX = NS.client.X;
    NS.locoY = NS.client.Y;
  };

  NS.deselezionaSVG = function () {
    NS.pan = false;
  };

  NS.panSVG = function (e) {
    e = NS.wrapEvent(e);
    NS.selectedSVG = e.target;
    // Pan mode
    if (NS.pan) {
      NS.client = NS.coordinateXY(e);
      NS.dx = (NS.client.X - NS.locoX) / NS.scala;
      NS.dy = (NS.client.Y - NS.locoY) / NS.scala;
      NS.setCTM(NS.vp, NS.stateMatrix.translate(NS.dx, NS.dy));
    }
  };


  /**
   * crea visualizzazione del pilastro.
   */
  NS.initPilastro = function () {
    NS.pilastro = document.createElementNS(NS.svgNS, "rect");
    NS.pilastro.setAttributeNS(null, "id", "pilastro_mygate");
    NS.pilastro.setAttributeNS(null, "width", -NS.D.x);
    NS.pilastro.setAttributeNS(null, "height", -NS.D.y);
    NS.pilastro.setAttributeNS(null, "x", NS.D.x);
    NS.pilastro.setAttributeNS(null, "y", NS.D.y);
    NS.muroLaterale = document.createElementNS(NS.svgNS, "rect");
    NS.muroLaterale.setAttributeNS(null, "id", "muroLaterale_mygate");
    NS.muroLaterale.setAttributeNS(null, "width", 100);
    NS.muroLaterale.setAttributeNS(null, "height", NS.Lx-NS.D.y);
    NS.muroLaterale.setAttributeNS(null, "x", NS.D.x-100);
    NS.muroLaterale.setAttributeNS(null, "y", NS.D.y);
    NS.vp.appendChild(NS.pilastro);
    NS.vp.appendChild(NS.muroLaterale);
    if (!NS.muro) {NS.muroLaterale.setAttributeNS(null, "visibility", "hidden");}
  };


  /**
    crea visualizzazione dell'anta.
   */

  NS.initAntaA = function () {
    NS.antaA = NS.creaElementi(NS.EGanta, NS.vp);
    NS.antaA.setAttribute("id", NS.antaA.getAttribute("id") + "A");
    NS.antaA.setAttributeNS(null, "fill", "none");
  };

  NS.initAnta = function () {
    NS.anta = NS.creaElementi(NS.EGanta, NS.vp);
    NS.anta.ridisegnaY = function () {
      NS.anta.childNodes[1].setAttributeNS(null, "height", NS.Ly * 2);
      NS.anta.childNodes[1].setAttributeNS(null, "y", -NS.Ly);
      NS.anta.childNodes[0].setAttributeNS(null, "r", NS.Ly);
      NS.antaA.childNodes[1].setAttributeNS(null, "height", NS.Ly * 2);
      NS.antaA.childNodes[1].setAttributeNS(null, "y", -NS.Ly);
      NS.antaA.childNodes[0].setAttributeNS(null, "r", NS.Ly);
    };
    NS.anta.ridisegnaX = function () {
      NS.anta.childNodes[1].setAttributeNS(null, "width", NS.Lx);
      NS.antaA.childNodes[1].setAttributeNS(null, "width", NS.Lx);
    };
    NS.anta.ridisegnaX();
    NS.anta.ridisegnaY();
  };

  /**
    compila un elemento svg con i dati che lo descrivono da un array.
   */
  NS.creaElementi = function (el, padre, tipoElemento) {
    var tipo = tipoElemento || "g";
    var elem = document.createElementNS(NS.svgNS, tipo);
    var third = el[el.length - 1] + "_mygate";
    elem.setAttributeNS(null, "id", third);
    for (var i = 0, len = el.length - 1; i < len; i++) {
      var eltype = el[i][el[i].length - 1];
      var subelem = document.createElementNS(NS.svgNS, eltype);
      for (var j = 0, jlen = el[i].length - 1; j < jlen; j++) {
        subelem.setAttributeNS(el[i][j][0], el[i][j][1], el[i][j][2]);
      }
      elem.appendChild(subelem);
    }
    padre.appendChild(elem);
    return elem;
  };

  /**
    Sets the current transform matrix of an element.
   */
  NS.setCTM = function (element, matrix) {
    var s = "matrix(" + matrix.a + "," + matrix.b + "," + matrix.c + "," + matrix.d + "," + matrix.e + "," + matrix.f + ")";
    element.setAttributeNS(null, "transform", s);
  };


  NS.selezionaPunto = function (e) {
    e = NS.wrapEvent(e);
    NS.client = NS.coordinateXY(e);
    NS.selectedElement = e.target;

    NS.quota.mostra();
    NS.locoX = NS.selectedElement.x;
    NS.locoY = NS.selectedElement.y;

    NS.clienteX = NS.client.X;
    NS.clienteY = NS.client.Y;
    if (NS.selectedElement.tip !== undefined) {
      NS.tooltip.mostra(NS.selectedElement.tip());
    }
    NS.SVGEl.onmousemove = NS.muoviPunto;
    NS.SVGEl.onmouseup = NS.deselezionaPunto;
  };

  NS.deselezionaPunto = function () {
    NS.SVGEl.onmousemove = NS.panSVG;
    NS.SVGEl.onmouseup = NS.deselezionaSVG;
    NS.quota.nascondi();
    NS.tooltip.nascondi();
  };

  NS.muoviPunto = function (e) {
    var ok;
    e = NS.wrapEvent(e);
    NS.client = NS.coordinateXY(e);
    NS.dX = (NS.client.X - NS.clienteX) / NS.scala; //;
    NS.dY = (NS.client.Y - NS.clienteY) / NS.scala; //;
    NS.xNuova = NS.locoX + NS.dX;
    NS.yNuova = NS.locoY + NS.dY;
    if (NS.selectedElement.tip !== undefined) {
      NS.tooltip.aggiorna(NS.selectedElement.tip());
    }
    ok = NS.selectedElement.move(NS.xNuova, NS.dX, NS.yNuova, NS.dY);
    if (ok) {
      NS.quota.aggiorna();
    }
  };
  
  NS.calcolaAngoloMassimoControPilastro = function () {
    NS.C.setY(NS.A.y +NS.Ly +46); //la y di C non cambia finchè non modifico la geometria del pilastro-cancello
    //calcola angMaxPilastro
    var oa2 = Math.pow(NS.A.y, 2) + Math.pow(NS.A.x, 2);
    var op = Math.sqrt(oa2 - Math.pow(NS.Ly, 2));
    NS.inters = NS.interscirco(0, 0, op, NS.A.x, NS.A.y, NS.Ly);
    if (NS.inters !== false) {
      //NS.clog("aggiorno l'angolo massimo dell'anta contro il pilastro");
      NS.angMaxPilastro = Math.atan2(NS.inters[3], NS.inters[1]) + Math.PI;
      //NS.clog("aggiorno l'angolo massimo dell'anta contro il pilastro: " + NS.angMaxPilastro);
    }
  };
  
  NS.calcolaAngoloMaxControPunto = function () {
      //calcola angMaxStaffa _ 
    //il punto di tangenza è a dx dal punto B. 
    //perchè lasciamo un pò di margine di sicurezza e non permettiamo un'installazione critica.
    //in questo caso "o" è(B.x+dx), "a" è sempre quello.
    var i, B, ba, op1, angTemp = 3, inters, intersTemp;
    NS.angMaxStaffa = 3; // valore di partenza, non ha particolare significato salvo restringere il dominio dei calcoli.
    // ora se la funzione è stata chiamata con argomenti so che sono le coordinate del punto B già corrette per avere 
    // un pò di margine di sicurezza
    for (i = 0; i < arguments.length; i++) {
      B = arguments[i];
      // ma il secondo argomento può essere undefined (se il muro non è attivo), nel qual caso salto.
      if (B === undefined) {continue;}
      ba = Math.pow(B.y - NS.A.y, 2) + Math.pow(B.x - NS.A.x, 2);
      op1 = Math.sqrt(ba - Math.pow(NS.Ly, 2));
      intersTemp = NS.interscirco(B.x, B.y, op1, NS.A.x, NS.A.y, NS.Ly);
      if (intersTemp !== false) {
        angTemp = Math.atan2(B.y - intersTemp[3], B.x - intersTemp[1]);
        if (angTemp < NS.angMaxStaffa) {
        NS.angMaxStaffa = angTemp;
        inters = intersTemp;
        }
      } else { NS.clog("c'è un problema nella f NS.calcolaAngoloMaxControPunto");}
    }
    return inters;
  };
  
  NS.calcolaAngoloMaxCorsaRid = function (B,Cx) { 
    //calcola angMaxCorsaRid
    var acx = Cx - NS.A.x;
    var acy = NS.C.y - NS.A.y;
    NS.ac = Math.sqrt(Math.pow(acx, 2) + Math.pow(acy, 2));
    var inters2 = NS.interscirco(B.x, B.y, NS.motori[NS.motAtt].ipo - NS.motori[NS.motAtt].corsa, NS.A.x, NS.A.y, NS.ac);
    var puntoCMaxCorsaRid = {};  //dove sarebbe C se il motore esaurisse tutta la corsa utile.

    if (inters2 === false) {
      NS.angMaxCorsaRid = 3;
      puntoCMaxCorsaRid.esiste = false;
    } else {
      puntoCMaxCorsaRid.esiste = true;
      //aggiorna i valori della posizione NS.ptCorsaX NS.ptCorsaY
      //servono per ridisegnare il motore aperto.
      if (inters2[1] > inters2[0]) {
        puntoCMaxCorsaRid.x = inters2[1];
        puntoCMaxCorsaRid.y = inters2[3];
      } else {
        puntoCMaxCorsaRid.x = inters2[0];
        puntoCMaxCorsaRid.y = inters2[2];
      }
      NS.angMaxCorsaRid = Math.atan2(puntoCMaxCorsaRid.y - NS.A.y, puntoCMaxCorsaRid.x - NS.A.x) - NS.angACasseX;
    }
    //return puntoCMaxCorsaRid; // non serve sapere
  }; 
  
    NS.calcolaAngoloMaxBraccio = function (B,Cx) { 
    //calcola angMaxBraccio
    // per ora viene scelto un limite tale che BC diventi 250mm
    var acx = Cx - NS.A.x;
    var acy = NS.C.y - NS.A.y;
    NS.ac = Math.sqrt(Math.pow(acx, 2) + Math.pow(acy, 2));
    var inters2 = NS.interscirco(B.x, B.y, 250, NS.A.x, NS.A.y, NS.ac);
    var puntoCMaxBraccio = {};
    if (inters2 === false) {
      NS.angMaxCorsaRid = 3;
      //aggiorna i valori della posizione NS.ptCorsaX NS.ptCorsaY
      //servono per ridisegnare il motore aperto.
    } else {
      if (inters2[1] > inters2[0]) {
        puntoCMaxBraccio.x = inters2[1];
        puntoCMaxBraccio.y = inters2[3];
      } else {
        puntoCMaxBraccio.x = inters2[0];
        puntoCMaxBraccio.y = inters2[2];
      }
      NS.angMaxCorsaRid = Math.atan2(puntoCMaxBraccio.y - NS.A.y, puntoCMaxBraccio.x - NS.A.x) - NS.angACasseX;
    }
  }; 
 
  
  /**
    Prova il braccio nel punto newB(newXB, newYB). Notare che NS.B non viene aggiornato
    fintanto che il punto newB non viene reputato valido.
    Questa funzione viene chiamata da 
  */
  
  NS.provaBraccio = function (B, cx) {
    var bc1, bc2, inters1, inters2, Cx = cx || NS.aggiornaBCX(B);
    // NS.angACasseX è l'angolo tra l'asse x e la retta ac, serve solo per calcolare la differenza corretta della corsa totale.
    //NS.clog("Cx è " + Cx);
    NS.angACasseX = NS.angoloAsseX(Cx, NS.C.y, NS.A.x, NS.A.y);
    bc1 = {
    x: (B.x+this.bContro[0].x),
    y: (B.y+this.bContro[0].y)
    };
    bc2 = {
    x: (B.x+this.bContro[1].x),
    y: (B.y+this.bContro[1].y)
    };
    if (NS.permettiBraccioSopraAnta) {
      if (this.attualmenteSulPilastro) {
      bc1.y = 0;
      bc2.y = 0;
      } else {
      bc1.x = 0;
      bc2.x = 0;
      }
    }
    // calcolo angolo massimo contro la staffa
    inters1 = NS.calcolaAngoloMaxControPunto(bc1,bc2);
    if (inters1 === false) {
      //NS.clog("Non posso calcolare angMaxStaffa");
      return false;
    }
    NS.calcolaAngoloMaxBraccio(B,Cx);
    if (NS.ac < NS.Lx/5) {
      //NS.clog(" NS.ac è minore di 1/5 della lunghezza dell'anta.");
      return false;
    }
    this.calcolaAngoloLimiteBCurvo(B,Cx);
    NS.angMcMax = Math.min(NS.angMaxStaffa, NS.angMaxPilastro, this.valoreAngLimiteBCurvo, this.valoreAngLimiteBDritto, NS.getAngoloMaxControMuro()); //NS.angMaxCorsaRid
    if (NS.angVoluto > NS.angMcMax) {
      NS.angFermo = NS.angMcMax;
    } else {
      NS.angFermo = NS.angVoluto;
    }
    NS.ptCorsaX = Math.cos(NS.angFermo + NS.angACasseX) * NS.ac + NS.A.x;
    NS.ptCorsaY = Math.sin(NS.angFermo + NS.angACasseX) * NS.ac + NS.A.y;
    
    ///verifica aggiornamento variabili
    var inters3 = NS.interscirco(B.x, B.y, 399, Cx, NS.C.y, 375);
    var inters4 = NS.interscirco(B.x, B.y, 399, NS.ptCorsaX, NS.ptCorsaY, 375);
    var AngBraccioDrittoChiuso = NS.angoloAsseX(B.x, B.y, inters3[0], inters3[2]) * 57.2957795;
    var AngBraccioDrittoAperto = NS.angoloAsseX(inters4[0], inters4[2], B.x, B.y) * 57.2957795;
    if (AngBraccioDrittoAperto < 0) {AngBraccioDrittoAperto = 180 +AngBraccioDrittoAperto;}    
    var corsaBraccioDritto = AngBraccioDrittoAperto -AngBraccioDrittoChiuso;
    NS.velocitaAntaBraccio = 0.5 * NS.Lx * NS.angFermo/corsaBraccioDritto;
    //NS.clog("ang ap braccio: " + AngBraccioDrittoAperto);
    //NS.clog("Velocità tangenziale: " + NS.velocitaAntaBraccio + " metri/minuto");
    //1400giri: 1,48 RPM : 530 gradi/min : 8 gradi/sec tenuto conto di partenza e rallentamento minimo
    //1600giri: 1,69 RPM : 608 gradi/min : 9 gradi/sec
    NS.aggiornaJ(inters1);
    this.testOk();
    NS.sta.aggiornaVisib();
    NS.C.setX(Cx);
    NS.B.setX(B.x);
    NS.B.setY(B.y);
    NS.aggiornaApertura();
    return true;
  };
  
    /**
      calcolo degli angoli di apertura ottenibili (e quindi della possibilità di una certa condizione di staffaggio)
     1) angMaxPilastro;  // var interna: angolo massimo di apertura prima di toccare il pilastro con l'anta - calcolato
     2) angMaxStaffa;    // var interna: angolo massimo di apertura prima di toccare la manina del riduttore con l'anta (si tengono 10mm di margine).
     3) angMaxCorsaRid;  // var interna: angolo massimo di apertura dell'anta se si usa tutta la corsa utile del motoriduttore (corsa utile = corsa totale - 20mm)
        angMcMax;        // angolo massimo effettivamente ottenibile, come valore più basso tra i due precedenti
    andrebbe separata la funzione di prova da quella di conferma della prova e relativo aggiornamento delle variabili
    */
  NS.provaPistone = function (B) {
    var Cx = NS.aggiornaBCX(B);
    NS.angACasseX = NS.angoloAsseX(Cx, NS.C.y, NS.A.x, NS.A.y);
    var btan = {
    x:B.x+58,
    y:B.y
    };
    var ctan;
    if (NS.muro) {
    ctan = {
    x:B.x+10,
    y:B.y+this.ipo-this.corsa
    };
    }
    // calcolo angolo max contro staffa
    var inters1 = NS.calcolaAngoloMaxControPunto(btan, ctan);
    
    if (inters1 === false) {
      //NS.clog("Non posso calcolare angMaxStaffa");
      return false;
    }
    NS.calcolaAngoloMaxCorsaRid(B,Cx);
    NS.angMcMax = Math.min(NS.angMaxCorsaRid, NS.angMaxStaffa, NS.angMaxPilastro, NS.getAngoloMaxControMuro());
    if (NS.angVoluto > NS.angMcMax) {
      NS.angFermo = NS.angMcMax;
    } else {
      NS.angFermo = NS.angVoluto;
    }
    NS.ptCorsaX = Math.cos(NS.angFermo + NS.angACasseX) * NS.ac + NS.A.x;
    NS.ptCorsaY =  Math.sin(NS.angFermo + NS.angACasseX) * NS.ac + NS.A.y;
    if (NS.test) {
    NS.testPt1.setAttributeNS(null,"cx",NS.ptCorsaX);//dea
    NS.testPt1.setAttributeNS(null,"cy",NS.ptCorsaY);
    }
    NS.aggiornaJ(inters1);
    this.testOk(); //staAtt = staTest
    NS.sta.aggiornaVisib();
    NS.C.setX(Cx);
    NS.B.setY(NS.sta.fori[this.staAtt][1]);
    NS.B.setX(B.x);
    var m = (NS.C.y - NS.B.y) / (NS.bc);
    NS.AngPist = Math.atan(m) * 180 / Math.PI;
    NS.corsaUsata = (this.ipo - NS.distanza(NS.ptCorsaX,NS.ptCorsaY,NS.B.x,NS.B.y)) / this.corsa;
    NS.aggiornaApertura();
    return true;
  };
  
  NS.aggiornaJ = function (i1) {
    if (NS.angMcMax === NS.angMaxStaffa) {
      NS.J.x = i1[1];
      NS.J.y = i1[3];
      return;
    }
    if (NS.angMcMax === NS.angMaxPilastro) {
      NS.J.x = NS.inters[1];
      NS.J.y = NS.inters[3];
      return;
    }
    NS.J.x = NS.A.x - NS.Ly * Math.sin(Math.PI - NS.angMcMax);
    NS.J.y = NS.A.y - NS.Ly * Math.cos(Math.PI - NS.angMcMax);
  };

  NS.aggiornaApertura = function () {
    var raggioApertura = NS.Lx;
    var cosAngMcMax = Math.cos(NS.angMcMax);
    var sinAngMcMax = Math.sin(NS.angMcMax);
    var finearcoX = NS.J.x + raggioApertura * cosAngMcMax;
    var finearcoY = NS.J.y + raggioApertura * sinAngMcMax;
    var percorso = "m " + NS.J.x + " " + NS.J.y + " L " + NS.A.x + " " + NS.A.y + " L " + NS.E.x + " " + (+NS.E.y - NS.Ly) + " L " + NS.E.x + " " + NS.E.y + " A " + raggioApertura + " " + raggioApertura + ", 0, 0, 1, " + finearcoX + " " + finearcoY + " z";
    NS.apertura.childNodes[0].setAttributeNS(null, "d", percorso);
    NS.gel1.imposta(NS.angMcMax);
    NS.gel2.imposta(NS.corsaUsata*Math.PI);
  };


  NS.setArrayAttr = function (O, A) {
    for (var x in A) {
      if (A.hasOwnProperty(x)) {
        O.setAttribute(x, A[x]);
      }
    }
  };

  NS.angoloAsseX = function (x0, y0, x1, y1) {
    var deX = x1 - x0,
      deY = y1 - y0;
    //NS.clog(deY + " " + deX); 
    return Math.atan(deY / deX);
  };
  
   /** distanze tra due punti */
  NS.distanza = function (x0, y0, x1, y1) {
    var dx = x1 - x0, dy = y1 - y0, dxy;
    dxy = Math.sqrt((dy * dy) + (dx * dx));
    return dxy;
    };

//http://mathworld.wolfram.com/Circle-CircleIntersection.html
  NS.interscirco = function (x0, y0, r0, x1, y1, r1) {
    var a, dx, dy, d, h, rx, ry;
    var x2, y2;

    /* distanze */
    dx = x1 - x0;
    dy = y1 - y0;

    /* Determine the straight-line distance between the centers. */
    d = Math.sqrt((dy * dy) + (dx * dx));

    /* Check for solvability. */
    if (d > (r0 + r1)) {
      /* no solution. circles do not intersect. */
      //console.log( "no solution. circles do not intersect." );
      return false;
    }
    if (d < Math.abs(r0 - r1)) {
      /* no solution. one circle is contained in the other */
      //console.log( "no solution. one circle is contained in the other." );
      return false;
    }

    /* 'point 2' is the point where the line through the circle
     * intersection points crosses the line between the circle
     * centers.  
     */

    /* Determine the distance from point 0 to point 2. */
    a = ((r0 * r0) - (r1 * r1) + (d * d)) / (2.0 * d);

    /* Determine the coordinates of point 2. */
    x2 = x0 + (dx * a / d);
    y2 = y0 + (dy * a / d);

    /* Determine the distance from point 2 to either of the
     * intersection points.
     */
    h = Math.sqrt((r0 * r0) - (a * a));

    /* Now determine the offsets of the intersection points from *************
     * point 2.
     */
    rx = -dy * (h / d);
    ry = dx * (h / d);

    /* Determine the absolute intersection points. */
    var xi = x2 + rx;
    var xi_prime = x2 - rx;
    var yi = y2 + ry;
    var yi_prime = y2 - ry;

    return [xi, xi_prime, yi, yi_prime];
  };

  //TODO:quasi pronto per una visualizzazione isometrica della NS.vp
  //NS.setCTM(NS.vp, NS.ma.translate(NS.SVGelOffX,NS.SVGelOffY).scale(NS.scala));

  NS.coordinateXY = function (e) {
  if (NS.isometrica) {
    var pt = NS.SVGEl.createSVGPoint();
    pt.x = e.clientX;
    pt.y = e.clientY;
    pt = pt.matrixTransform(NS.ma.rotate(-NS.cinquantacinque));

    return {
    X : NS.destro * pt.x,
    Y : pt.y
    };
  }
  return {
    X: NS.destro * e.clientX, //pt.x,
    Y: e.clientY //pt.y
  };
  };

  window.onload = NS.onloadSim;

}($MYGATE);
